grf {
    grfid: "AK01";
    name: string(STR_GRF_NAME);
    desc: string(STR_GRF_DESCRIPTION);
    version: 0;
    min_compatible_version: 0;
    param 0 {
        hormone {
            type: int;
            name: string(STR_PARAM_NAME_HORMONE);
            desc: string(STR_PARAM_DESC_HORMONE);
            min_value: 0;
            max_value: 2;
            def_value: 0;
            names: {
                0: string(STR_PARAM_VALUE_HORMONE_ESTROGEN);
                1: string(STR_PARAM_VALUE_HORMONE_TESTOSTERONE);
                2: string(STR_PARAM_VALUE_HORMONE_BOTH);
            };
        }
    }
    param 1 {
        industry_decay {
            type: bool;
            name: string(STR_PARAM_NAME_INDUSTRY_DECAY);
            desc: string(STR_PARAM_DESC_INDUSTRY_DECAY);
            def_value: 0;
        }
    }
    param 2 {
        industry_growth {
            type: bool;
            name: string(STR_PARAM_NAME_INDUSTRY_GROWTH);
            desc: string(STR_PARAM_DESC_INDUSTRY_GROWTH);
            def_value: 1;
        }
    }
    param 3 {
        industry_starting_power {
            type: int;
            name: string(STR_PARAM_NAME_INDUSTRY_STARTING_POWER);
            desc: string(STR_PARAM_DESC_INDUSTRY_STARTING_POWER);
            min_value: 1;
            max_value: 6;
            def_value: 3;
            names: {
                1: string(STR_INDUSTRY_POWER_MINIMUM);
                2: string(STR_INDUSTRY_POWER_LOW);
                3: string(STR_INDUSTRY_POWER_DEFAULT);
                4: string(STR_INDUSTRY_POWER_HIGH);
                5: string(STR_INDUSTRY_POWER_VERY_HIGH);
                6: string(STR_INDUSTRY_POWER_MAXIMUM);
            };
        }
    }
}

// TODO: make production level change based on cargo transported out instead of supplied

// Listen. Yes, this is all in one file. That's just how openttd NML works, for some reason.
// Yes, I could build a basic templating program to do actual compartmentalization,
// But I'm lazy and this mod is supposed to be a meme, so one giant .nml file it is.

// ----------------------------------------------------------------
// Conventions
// ----------------------------------------------------------------

// BOOST_CARGO_FIRST    :Cargos that boost production should be listed first in all indexes.

// ----------------------------------------------------------------
// Settings
// ----------------------------------------------------------------

cargotable {
    PASS, ENGS, FERT, SALT, PTSH, SAND, MNRL, CORN, SOYB, YAMS, VIAL, CHEM, VGOL, ALCH, DIOS, RWES, RWTS, ESTR, TEST
}

disable_item(FEAT_CARGOS, 1);
disable_item(FEAT_CARGOS, 3, 11);
disable_item(FEAT_INDUSTRIES, 0, 36);

switch (FEAT_INDUSTRIES, SELF, availability_in_estrogen, hormone) {
    0: return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
    1: return CB_RESULT_IND_NO_CONSTRUCTION;
    2: return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
    return CB_RESULT_IND_NO_CONSTRUCTION;
}

switch (FEAT_INDUSTRIES, SELF, availability_in_testosterone, hormone) {
    0: return CB_RESULT_IND_NO_CONSTRUCTION;
    1: return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
    2: return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
    return CB_RESULT_IND_NO_CONSTRUCTION;
}

// ----------------------------------------------------------------
// Cargo Definitions
// ----------------------------------------------------------------

item (FEAT_CARGOS, item_engineering_supplies) {
    property {
        number: 12;
        type_name: string(STR_CARGO_PLURAL_ENGINEERING_SUPPLIES);
        unit_name: string(STR_CARGO_SINGULAR_ENGINEERING_SUPPLIES);
        type_abbreviation: string(STR_CARGO_ABBREV_ENGINEERING_SUPPLIES);
        cargo_label: "ENGS";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_ENGINEERING_SUPPLIES);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 20;
        single_penalty_length: 40;
        price_factor: 110;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_fertilizer) {
    property {
        number: 13;
        type_name: string(STR_CARGO_PLURAL_FERTILIZER);
        unit_name: string(STR_CARGO_SINGULAR_FERTILIZER);
        type_abbreviation: string(STR_CARGO_ABBREV_FERTILIZER);
        cargo_label: "FERT";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_FERTILIZER);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 20;
        single_penalty_length: 40;
        price_factor: 151;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_salt) {
    property {
        number: 14;
        type_name: string(STR_CARGO_PLURAL_SALT);
        unit_name: string(STR_CARGO_SINGULAR_SALT);
        type_abbreviation: string(STR_CARGO_ABBREV_SALT);
        cargo_label: "SALT";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_SALT);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 100;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_potash) {
    property {
        number: 15;
        type_name: string(STR_CARGO_PLURAL_POTASH);
        unit_name: string(STR_CARGO_SINGULAR_POTASH);
        type_abbreviation: string(STR_CARGO_ABBREV_POTASH);
        cargo_label: "PTSH";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_POTASH);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 100;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_sand) {
    property {
        number: 16;
        type_name: string(STR_CARGO_PLURAL_SAND);
        unit_name: string(STR_CARGO_SINGULAR_SAND);
        type_abbreviation: string(STR_CARGO_ABBREV_SAND);
        cargo_label: "SAND";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_SAND);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 40;
        single_penalty_length: 255;
        price_factor: 100;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_minerals) {
    property {
        number: 17;
        type_name: string(STR_CARGO_PLURAL_MINERALS);
        unit_name: string(STR_CARGO_SINGULAR_MINERALS);
        type_abbreviation: string(STR_CARGO_ABBREV_MINERALS);
        cargo_label: "MNRL";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_MINERALS);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 100;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_corn) {
    property {
        number: 18;
        type_name: string(STR_CARGO_PLURAL_CORN);
        unit_name: string(STR_CARGO_SINGULAR_CORN);
        type_abbreviation: string(STR_CARGO_ABBREV_CORN);
        cargo_label: "CORN";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_CORN);
        cargo_classes: bitmask(CC_COVERED, CC_BULK);
        penalty_lowerbound: 12;
        single_penalty_length: 40;
        price_factor: 90;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_soy) {
    property {
        number: 19;
        type_name: string(STR_CARGO_PLURAL_SOY);
        unit_name: string(STR_CARGO_SINGULAR_SOY);
        type_abbreviation: string(STR_CARGO_ABBREV_SOY);
        cargo_label: "SOYB";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_SOY);
        cargo_classes: bitmask(CC_COVERED, CC_BULK);
        penalty_lowerbound: 8;
        single_penalty_length: 24;
        price_factor: 117;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_yam) {
    property {
        number: 20;
        type_name: string(STR_CARGO_PLURAL_YAM);
        unit_name: string(STR_CARGO_SINGULAR_YAM);
        type_abbreviation: string(STR_CARGO_ABBREV_YAM);
        cargo_label: "YAMS";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_YAM);
        cargo_classes: bitmask(CC_COVERED, CC_BULK);
        penalty_lowerbound: 8;
        single_penalty_length: 24;
        price_factor: 117;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_vials) {
    property {
        number: 21;
        type_name: string(STR_CARGO_PLURAL_VIALS);
        unit_name: string(STR_CARGO_SINGULAR_VIALS);
        type_abbreviation: string(STR_CARGO_ABBREV_VIALS);
        cargo_label: "VIAL";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_VIALS);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 16;
        single_penalty_length: 160;
        price_factor: 110;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_chemicals) {
    property {
        number: 22;
        type_name: string(STR_CARGO_PLURAL_CHEMICALS);
        unit_name: string(STR_CARGO_SINGULAR_CHEMICALS);
        type_abbreviation: string(STR_CARGO_ABBREV_CHEMICALS);
        cargo_label: "CHEM";
        units_of_cargo: string(TTD_STR_LITERS);
        items_of_cargo: string(STR_CARGO_UNIT_CHEMICALS);
        cargo_classes: bitmask(CC_LIQUID, CC_HAZARDOUS);
        penalty_lowerbound: 24;
        single_penalty_length: 48;
        price_factor: 148;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_vegetable_oil) {
    property {
        number: 23;
        type_name: string(STR_CARGO_PLURAL_VEGETABLE_OIL);
        unit_name: string(STR_CARGO_SINGULAR_VEGETABLE_OIL);
        type_abbreviation: string(STR_CARGO_ABBREV_VEGETABLE_OIL);
        cargo_label: "VGOL";
        units_of_cargo: string(TTD_STR_LITERS);
        items_of_cargo: string(STR_CARGO_UNIT_VEGETABLE_OIL);
        cargo_classes: bitmask(CC_LIQUID);
        penalty_lowerbound: 8;
        single_penalty_length: 36;
        price_factor: 124;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_alcohol) {
    property {
        number: 24;
        type_name: string(STR_CARGO_PLURAL_ALCOHOL);
        unit_name: string(STR_CARGO_SINGULAR_ALCOHOL);
        type_abbreviation: string(STR_CARGO_ABBREV_ALCOHOL);
        cargo_label: "ALCH";
        units_of_cargo: string(TTD_STR_LITERS);
        items_of_cargo: string(STR_CARGO_UNIT_ALCOHOL);
        cargo_classes: bitmask(CC_LIQUID);
        penalty_lowerbound: 12;
        single_penalty_length: 40;
        price_factor: 122;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_diosgenin) {
    property {
        number: 25;
        type_name: string(STR_CARGO_PLURAL_DIOSGENIN);
        unit_name: string(STR_CARGO_SINGULAR_DIOSGENIN);
        type_abbreviation: string(STR_CARGO_ABBREV_DIOSGENIN);
        cargo_label: "DIOS";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_DIOSGENIN);
        cargo_classes: bitmask(CC_POWDERIZED, CC_BULK);
        penalty_lowerbound: 32;
        single_penalty_length: 40;
        price_factor: 170;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_raw_estrone) {
    property {
        number: 26;
        type_name: string(STR_CARGO_PLURAL_RAW_ESTRONE);
        unit_name: string(STR_CARGO_SINGULAR_RAW_ESTRONE);
        type_abbreviation: string(STR_CARGO_ABBREV_RAW_ESTRONE);
        cargo_label: "RWES";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_RAW_ESTRONE);
        cargo_classes: bitmask(CC_POWDERIZED, CC_BULK);
        penalty_lowerbound: 32;
        single_penalty_length: 140;
        price_factor: 160;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_raw_testosterone) {
    property {
        number: 27;
        type_name: string(STR_CARGO_PLURAL_RAW_TESTOSTERONE);
        unit_name: string(STR_CARGO_SINGULAR_RAW_TESTOSTERONE);
        type_abbreviation: string(STR_CARGO_ABBREV_RAW_TESTOSTERONE);
        cargo_label: "RWTS";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_RAW_TESTOSTERONE);
        cargo_classes: bitmask(CC_POWDERIZED, CC_BULK);
        penalty_lowerbound: 32;
        single_penalty_length: 140;
        price_factor: 160;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_estrogen) {
    property {
        number: 28;
        type_name: string(STR_CARGO_PLURAL_ESTROGEN);
        unit_name: string(STR_CARGO_SINGULAR_ESTROGEN);
        type_abbreviation: string(STR_CARGO_ABBREV_ESTROGEN);
        cargo_label: "ESTR";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_ESTROGEN);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 12;
        single_penalty_length: 32;
        price_factor: 193;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_testosterone) {
    property {
        number: 29;
        type_name: string(STR_CARGO_PLURAL_TESTOSTERONE);
        unit_name: string(STR_CARGO_SINGULAR_TESTOSTERONE);
        type_abbreviation: string(STR_CARGO_ABBREV_TESTOSTERONE);
        cargo_label: "TEST";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_TESTOSTERONE);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 13;
        single_penalty_length: 32;
        price_factor: 193;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
}

// ----------------------------------------------------------------
// Tiles
// ----------------------------------------------------------------

spritelayout spritelayout_placeholder {
    ground {
        sprite: GROUNDSPRITE_NORMAL;
    }
    building {
        sprite: 4698;
    }
}

item(FEAT_INDUSTRYTILES, tile_placeholder) {
    property {
        substitute: 0;
        special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
    }
    graphics {
        default: spritelayout_placeholder;
    }
}

tilelayout layout_default {
    rotation: DIRECTION_NORTH;
    0,0: tile_placeholder;
}

// spritelayout spritelayout_port_coast {
//     ground {
//         sprite:GROUNDSPRITE_NORMAL;
//     }
//     building {
//         sprite:XXXX;
//     }
// }

// spritelayout spritelayout_port_water {
//     ground {
//         sprite:GROUNDSPRITE_WATER;
//     }
//     building {
//         sprite:XXXX;
//     }
// }

// item(FEAT_INDUSTRYTILES, tile_port_coast) {
//     property {
//         substitute: 0;
//         land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
//         special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
//     }
//     graphics {
//         default: spritelayout_port_coast;
//     }
// }

// item(FEAT_INDUSTRYTILES, tile_port_water) {
//     property {
//         substitute: 0;
//         land_shape_flags: bitmask(LSF_ALLOW_ON_WATER);
//         special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
//     }
//     graphics {
//         default: spritelayout_port_water;
//     }
// }

// tilelayout layout_port_north {
//     rotation: DIRECTION_NORTH;
//     0,0: tile_port_coast;
// }

// ----------------------------------------------------------------
// Industry Addressing Reference
// ----------------------------------------------------------------
// PERM_000         :Production cycle index                                         [0..26]
// PERM_001..028    :Input Cargo 0 delivered last 27 cycles (+1 sum @ PERM_028)
// PERM_029..056    :Input Cargo 1 delivered last 27 cycles (+1 sum @ PERM_056)
// PERM_057..084    :Input Cargo 2 delivered last 27 cycles (+1 sum @ PERM_084)
// PERM_085         :Seasons without cargo
// PERM_086         :Seasons with consistent cargo
// PERM_087         :Production level (0: Closed; 1: Ruin -2; 2: Ruin -1; 3: Default; 4: Progress +1; 5: Progress +2; 6: Progress +3)
// PERM_088         :Random production variance
// PERM_089         :Season (0..3)
// PERM_90          :Supplied multiplier
// PERM_91          :Combo multiplier
// PERM_092..127    :Unassigned
//
// TEMP_000..031    :Parameter argument registers
// TEMP_032..063    :Parameter return registers
// TEMP_064..0127   :Internal registers for in-function calculations
// TEMP_128..255    :Unassigned
// TEMP_256..275    :Textstack


// ----------------------------------------------------------------
// Industry Scripts
// ----------------------------------------------------------------

switch(FEAT_INDUSTRIES, SELF, load_perm_variable, index, index) {
    0: LOAD_PERM(0);
    1: LOAD_PERM(1);
    2: LOAD_PERM(2);
    3: LOAD_PERM(3);
    4: LOAD_PERM(4);
    5: LOAD_PERM(5);
    6: LOAD_PERM(6);
    7: LOAD_PERM(7);
    8: LOAD_PERM(8);
    9: LOAD_PERM(9);
    10: LOAD_PERM(10);
    11: LOAD_PERM(11);
    12: LOAD_PERM(12);
    13: LOAD_PERM(13);
    14: LOAD_PERM(14);
    15: LOAD_PERM(15);
    16: LOAD_PERM(16);
    17: LOAD_PERM(17);
    18: LOAD_PERM(18);
    19: LOAD_PERM(19);
    20: LOAD_PERM(20);
    21: LOAD_PERM(21);
    22: LOAD_PERM(22);
    23: LOAD_PERM(23);
    24: LOAD_PERM(24);
    25: LOAD_PERM(25);
    26: LOAD_PERM(26);
    27: LOAD_PERM(27);
    28: LOAD_PERM(28);
    29: LOAD_PERM(29);
    30: LOAD_PERM(30);
    31: LOAD_PERM(31);
    32: LOAD_PERM(32);
    33: LOAD_PERM(33);
    34: LOAD_PERM(34);
    35: LOAD_PERM(35);
    36: LOAD_PERM(36);
    37: LOAD_PERM(37);
    38: LOAD_PERM(38);
    39: LOAD_PERM(39);
    40: LOAD_PERM(40);
    41: LOAD_PERM(41);
    42: LOAD_PERM(42);
    43: LOAD_PERM(43);
    44: LOAD_PERM(44);
    45: LOAD_PERM(45);
    46: LOAD_PERM(46);
    47: LOAD_PERM(47);
    48: LOAD_PERM(48);
    49: LOAD_PERM(49);
    50: LOAD_PERM(50);
    51: LOAD_PERM(51);
    52: LOAD_PERM(52);
    53: LOAD_PERM(53);
    54: LOAD_PERM(54);
    55: LOAD_PERM(55);
    56: LOAD_PERM(56);
    57: LOAD_PERM(57);
    58: LOAD_PERM(58);
    59: LOAD_PERM(59);
    60: LOAD_PERM(60);
    61: LOAD_PERM(61);
    62: LOAD_PERM(62);
    63: LOAD_PERM(63);
    64: LOAD_PERM(64);
    65: LOAD_PERM(65);
    66: LOAD_PERM(66);
    67: LOAD_PERM(67);
    68: LOAD_PERM(68);
    69: LOAD_PERM(69);
    70: LOAD_PERM(70);
    71: LOAD_PERM(71);
    72: LOAD_PERM(72);
    73: LOAD_PERM(73);
    74: LOAD_PERM(74);
    75: LOAD_PERM(75);
    76: LOAD_PERM(76);
    77: LOAD_PERM(77);
    78: LOAD_PERM(78);
    79: LOAD_PERM(79);
    80: LOAD_PERM(80);
    81: LOAD_PERM(81);
    82: LOAD_PERM(82);
    83: LOAD_PERM(83);
    84: LOAD_PERM(84);
    85: LOAD_PERM(85);
    86: LOAD_PERM(86);
    87: LOAD_PERM(87);
    88: LOAD_PERM(88);
    89: LOAD_PERM(89);
    90: LOAD_PERM(90);
    91: LOAD_PERM(91);
    92: LOAD_PERM(92);
    93: LOAD_PERM(93);
    94: LOAD_PERM(94);
    95: LOAD_PERM(95);
    96: LOAD_PERM(96);
    97: LOAD_PERM(97);
    98: LOAD_PERM(98);
    99: LOAD_PERM(99);
    100: LOAD_PERM(100);
    101: LOAD_PERM(101);
    102: LOAD_PERM(102);
    103: LOAD_PERM(103);
    104: LOAD_PERM(104);
    105: LOAD_PERM(105);
    106: LOAD_PERM(106);
    107: LOAD_PERM(107);
    108: LOAD_PERM(108);
    109: LOAD_PERM(109);
    110: LOAD_PERM(110);
    111: LOAD_PERM(111);
    112: LOAD_PERM(112);
    113: LOAD_PERM(113);
    114: LOAD_PERM(114);
    115: LOAD_PERM(115);
    116: LOAD_PERM(116);
    117: LOAD_PERM(117);
    118: LOAD_PERM(118);
    119: LOAD_PERM(119);
    120: LOAD_PERM(120);
    121: LOAD_PERM(121);
    122: LOAD_PERM(122);
    123: LOAD_PERM(123);
    124: LOAD_PERM(124);
    125: LOAD_PERM(125);
    126: LOAD_PERM(126);
    127: LOAD_PERM(127);
}

switch(FEAT_INDUSTRIES, SELF, get_level, LOAD_PERM(28)) {
    0..19: return 1;
    20..79: return 2;
    return 3;
}

switch(FEAT_INDUSTRIES, SELF, supplied_multiplier, LOAD_PERM(28)) {
    0..19: return 1;
    20..79: return 2;
    return 4;
}

switch(FEAT_INDUSTRIES, SELF, check_positive, sum_index, load_perm_variable(sum_index)) {
    0: return 0;
    return 1;
}

switch(FEAT_INDUSTRIES, SELF, combo_multiplier, [
    check_positive(28) + check_positive(56) + check_positive(84)
]) {
    3: return 3;
    2: return 2;
    return 1;
}

switch(FEAT_INDUSTRIES, SELF, apply_production_modifiers, expected_value, multiplier, [
    LOAD_PERM(87)
]) {
    0: return ((expected_value * multiplier * LOAD_PERM(88)) / (4 * 10));
    1: return ((expected_value * multiplier * LOAD_PERM(88)) / (4 * 10));
    2: return ((expected_value * multiplier * LOAD_PERM(88)) / (2 * 10));
    3: return (expected_value * multiplier * LOAD_PERM(88)) / 10;
    4: return ((expected_value * multiplier * LOAD_PERM(88) * 3) / (2 * 10));
    5: return ((expected_value * multiplier * LOAD_PERM(88) * 9) / (4 * 10));
    6: return ((expected_value * multiplier * LOAD_PERM(88) * 27) / (8 * 10));
    return expected_value;
}

switch(FEAT_INDUSTRIES, SELF, update_supplied_multiplier, sum_index, [
    STORE_PERM(supplied_multiplier(), 90),
    STORE_PERM(combo_multiplier(), 91)
]) {
    return 0;
}

switch(FEAT_INDUSTRIES, SELF, production_cycle_tick_closer, sum_index, [
    STORE_PERM(0, sum_index-28+LOAD_PERM(0)+1),   // Store 0 in this production cycle index's register
    sum_index
]) {
    28: update_supplied_multiplier(sum_index);
    return 0;
}

switch(FEAT_INDUSTRIES, SELF, iterate_production_cycle_tick_cargo_helper, sum_index, sub_index, [
    STORE_TEMP(LOAD_TEMP(32) + load_perm_variable(sum_index-28+sub_index), 32)
]) {
    return;
}

switch(FEAT_INDUSTRIES, SELF, iterate_production_cycle_tick_cargo, sum_index, [
    STORE_TEMP(0, 32),
    iterate_production_cycle_tick_cargo_helper(sum_index, 1),
    iterate_production_cycle_tick_cargo_helper(sum_index, 2),
    iterate_production_cycle_tick_cargo_helper(sum_index, 3),
    iterate_production_cycle_tick_cargo_helper(sum_index, 4),
    iterate_production_cycle_tick_cargo_helper(sum_index, 5),
    iterate_production_cycle_tick_cargo_helper(sum_index, 6),
    iterate_production_cycle_tick_cargo_helper(sum_index, 7),
    iterate_production_cycle_tick_cargo_helper(sum_index, 8),
    iterate_production_cycle_tick_cargo_helper(sum_index, 9),
    iterate_production_cycle_tick_cargo_helper(sum_index, 10),
    iterate_production_cycle_tick_cargo_helper(sum_index, 11),
    iterate_production_cycle_tick_cargo_helper(sum_index, 12),
    iterate_production_cycle_tick_cargo_helper(sum_index, 13),
    iterate_production_cycle_tick_cargo_helper(sum_index, 14),
    iterate_production_cycle_tick_cargo_helper(sum_index, 15),
    iterate_production_cycle_tick_cargo_helper(sum_index, 16),
    iterate_production_cycle_tick_cargo_helper(sum_index, 17),
    iterate_production_cycle_tick_cargo_helper(sum_index, 18),
    iterate_production_cycle_tick_cargo_helper(sum_index, 19),
    iterate_production_cycle_tick_cargo_helper(sum_index, 20),
    iterate_production_cycle_tick_cargo_helper(sum_index, 21),
    iterate_production_cycle_tick_cargo_helper(sum_index, 22),
    iterate_production_cycle_tick_cargo_helper(sum_index, 23),
    iterate_production_cycle_tick_cargo_helper(sum_index, 24),
    iterate_production_cycle_tick_cargo_helper(sum_index, 25),
    iterate_production_cycle_tick_cargo_helper(sum_index, 26),
    iterate_production_cycle_tick_cargo_helper(sum_index, 27),
    STORE_PERM(LOAD_TEMP(32), sum_index)
]) {
    production_cycle_tick_closer(sum_index);
}
 
switch(FEAT_INDUSTRIES, SELF, production_cycle_tick_helper, cargo_index, [
    STORE_TEMP(28*(1+cargo_index), 127),       // Store index of sum register
]) {
    iterate_production_cycle_tick_cargo(LOAD_TEMP(127));        // Kick off summation
}

switch(FEAT_INDUSTRIES, SELF, production_cycle_tick, [
    STORE_PERM((LOAD_PERM(0)+1)%27, 0),         // Load production cycle index, increment, and mod 27
    production_cycle_tick_helper(0),
    production_cycle_tick_helper(1),
    production_cycle_tick_helper(2)
]) {
    return;
}

switch(FEAT_INDUSTRIES, SELF, increment_accepted_cargo, cargo_index, cargo_quantity, [
    STORE_TEMP(1+28*cargo_index+LOAD_PERM(0), 64),                     // Get register representing production cycle
    STORE_TEMP(load_perm_variable(LOAD_TEMP(64))+cargo_quantity, 65),
    STORE_PERM(LOAD_TEMP(65), LOAD_TEMP(64))
]) {
    return;
}

// Return amount of total cargo consumed
switch(FEAT_INDUSTRIES, SELF, do_cargo_accept_cycle, cargo_quantity_0, cargo_quantity_1, cargo_quantity_2, [
    increment_accepted_cargo(0, cargo_quantity_0),
    increment_accepted_cargo(1, cargo_quantity_1),
    increment_accepted_cargo(2, cargo_quantity_2),
]) {
    return cargo_quantity_0 + cargo_quantity_1 + cargo_quantity_2;
}

switch(FEAT_INDUSTRIES, SELF, extra_text_generic, [
    STORE_TEMP(     ((LOAD_PERM(87) == 0) * string(STR_INDUSTRY_POWER_MINIMUM)      ) +
                    ((LOAD_PERM(87) == 1) * string(STR_INDUSTRY_POWER_MINIMUM)      ) +
                    ((LOAD_PERM(87) == 2) * string(STR_INDUSTRY_POWER_LOW)          ) +
                    ((LOAD_PERM(87) == 3) * string(STR_INDUSTRY_POWER_DEFAULT)      ) +
                    ((LOAD_PERM(87) == 4) * string(STR_INDUSTRY_POWER_HIGH)         ) +
                    ((LOAD_PERM(87) == 5) * string(STR_INDUSTRY_POWER_VERY_HIGH)    ) +
                    ((LOAD_PERM(87) == 6) * string(STR_INDUSTRY_POWER_MAXIMUM)      ),
                    256
                ),
]) {
    return string(STR_INDUSTRY_LEVEL_STATE_NORMAL_GENERIC);
}

switch(FEAT_INDUSTRIES, SELF, extra_text_industry_engineering, [
    STORE_TEMP(     ((LOAD_PERM(87) == 0) * string(STR_INDUSTRY_POWER_MINIMUM)      ) +
                    ((LOAD_PERM(87) == 1) * string(STR_INDUSTRY_POWER_MINIMUM)      ) +
                    ((LOAD_PERM(87) == 2) * string(STR_INDUSTRY_POWER_LOW)          ) +
                    ((LOAD_PERM(87) == 3) * string(STR_INDUSTRY_POWER_DEFAULT)      ) +
                    ((LOAD_PERM(87) == 4) * string(STR_INDUSTRY_POWER_HIGH)         ) +
                    ((LOAD_PERM(87) == 5) * string(STR_INDUSTRY_POWER_VERY_HIGH)    ) +
                    ((LOAD_PERM(87) == 6) * string(STR_INDUSTRY_POWER_MAXIMUM)      ) |
                    LOAD_PERM(28) << 16,
                    256
                ),
    get_level()
]) {
    3: return string(STR_INDUSTRY_LEVEL_STATE_GUNG_HO);
    2: return string(STR_INDUSTRY_LEVEL_STATE_ENHANCED);
    return string(STR_INDUSTRY_LEVEL_STATE_NORMAL_ENGS);
}

switch(FEAT_INDUSTRIES, SELF, extra_text_industry_fertilizer, [
    STORE_TEMP(     ((LOAD_PERM(87) == 0) * string(STR_INDUSTRY_POWER_MINIMUM)      ) +
                    ((LOAD_PERM(87) == 1) * string(STR_INDUSTRY_POWER_MINIMUM)      ) +
                    ((LOAD_PERM(87) == 2) * string(STR_INDUSTRY_POWER_LOW)          ) +
                    ((LOAD_PERM(87) == 3) * string(STR_INDUSTRY_POWER_DEFAULT)      ) +
                    ((LOAD_PERM(87) == 4) * string(STR_INDUSTRY_POWER_HIGH)         ) +
                    ((LOAD_PERM(87) == 5) * string(STR_INDUSTRY_POWER_VERY_HIGH)    ) +
                    ((LOAD_PERM(87) == 6) * string(STR_INDUSTRY_POWER_MAXIMUM)      ) |
                    LOAD_PERM(28) << 16,
                    256
                ),
    get_level()
]) {
    4: return string(STR_INDUSTRY_LEVEL_STATE_GUNG_HO);
    2: return string(STR_INDUSTRY_LEVEL_STATE_ENHANCED);
    return string(STR_INDUSTRY_LEVEL_STATE_NORMAL_FERT);
}

switch(FEAT_INDUSTRIES, SELF, extra_text_industry_double, [
    STORE_TEMP(     ((LOAD_PERM(87) == 0) * string(STR_INDUSTRY_POWER_MINIMUM)      ) +
                    ((LOAD_PERM(87) == 1) * string(STR_INDUSTRY_POWER_MINIMUM)      ) +
                    ((LOAD_PERM(87) == 2) * string(STR_INDUSTRY_POWER_LOW)          ) +
                    ((LOAD_PERM(87) == 3) * string(STR_INDUSTRY_POWER_DEFAULT)      ) +
                    ((LOAD_PERM(87) == 4) * string(STR_INDUSTRY_POWER_HIGH)         ) +
                    ((LOAD_PERM(87) == 5) * string(STR_INDUSTRY_POWER_VERY_HIGH)    ) +
                    ((LOAD_PERM(87) == 6) * string(STR_INDUSTRY_POWER_MAXIMUM)      ),
                    256
                ),
    (check_positive(28) + check_positive(56) + check_positive(84))
]) {
    2: return string(STR_INDUSTRY_RATIO_STATE_ENHANCED_DOUBLE);
    return string(STR_INDUSTRY_RATIO_STATE_NORMAL_DOUBLE);
}

switch(FEAT_INDUSTRIES, SELF, extra_text_industry_triple, [
    STORE_TEMP(     ((LOAD_PERM(87) == 0) * string(STR_INDUSTRY_POWER_MINIMUM)      ) +
                    ((LOAD_PERM(87) == 1) * string(STR_INDUSTRY_POWER_MINIMUM)      ) +
                    ((LOAD_PERM(87) == 2) * string(STR_INDUSTRY_POWER_LOW)          ) +
                    ((LOAD_PERM(87) == 3) * string(STR_INDUSTRY_POWER_DEFAULT)      ) +
                    ((LOAD_PERM(87) == 4) * string(STR_INDUSTRY_POWER_HIGH)         ) +
                    ((LOAD_PERM(87) == 5) * string(STR_INDUSTRY_POWER_VERY_HIGH)    ) +
                    ((LOAD_PERM(87) == 6) * string(STR_INDUSTRY_POWER_MAXIMUM)      ),
                    256
                ),
    (check_positive(28) + check_positive(56) + check_positive(84))
]) {
    3: return string(STR_INDUSTRY_RATIO_STATE_GUNG_HO);
    2: return string(STR_INDUSTRY_RATIO_STATE_ENHANCED_TRIPLE);
    return string(STR_INDUSTRY_RATIO_STATE_NORMAL_TRIPLE);
}

switch(FEAT_INDUSTRIES, SELF, cargo_subtype_display_input, cargo_index, [
    load_perm_variable(28*(1+cargo_index))
]) {
    0: return (0x3800 + string(STR_EMPTY));
    return 0x3800 + string(STR_CARGO_SUPPLIED);
}

switch(FEAT_INDUSTRIES, SELF, cargo_subtype_display_industry, [
    STORE_TEMP(getbits(extra_callback_info2, 0, 8), 64),
    LOAD_TEMP(64)
]) {
    0..2: return cargo_subtype_display_input(LOAD_TEMP(64));
    return CB_RESULT_IND_NO_TEXT_NO_AMOUNT;
}

random_switch(FEAT_INDUSTRIES, SELF, roll_12) {
    1: return 1;
    1: return 2;
    1: return 3;
    1: return 4;
    1: return 5;
    1: return 6;
    1: return 7;
    1: return 8;
    1: return 9;
    1: return 10;
    1: return 11;
    1: return 12;
}

switch(FEAT_INDUSTRIES, SELF, halve_production, [
    STORE_TEMP(LOAD_TEMP(127), 256),
    STORE_PERM(LOAD_PERM(87)-1, 87),
    STORE_PERM(0, 85)
]) {
    return CB_RESULT_IND_PROD_NO_CHANGE || bitmask(8);
}

switch(FEAT_INDUSTRIES, SELF, double_production, [
    STORE_TEMP(LOAD_TEMP(126), 256),
    STORE_PERM(LOAD_PERM(87)+1, 87),
    STORE_PERM(0, 86)
]) {
    return CB_RESULT_IND_PROD_NO_CHANGE || bitmask(8);
}

switch(FEAT_INDUSTRIES, SELF, close_production, [
    (LOAD_PERM(87) == 1) * industry_decay
]) {
    1: return CB_RESULT_IND_PROD_CLOSE;
    return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, decay_production, [
    (industry_decay + (LOAD_PERM(87) > industry_starting_power))
]) {
    0: return CB_RESULT_IND_PROD_NO_CHANGE;
    halve_production;
}

switch(FEAT_INDUSTRIES, SELF, grow_production, [
    (industry_growth + (LOAD_PERM(87) < industry_starting_power))
]) {
    0: return CB_RESULT_IND_PROD_NO_CHANGE;
    double_production;
}

switch(FEAT_INDUSTRIES, SELF, roll_ruin_1, modifier, [
    roll_12() + modifier
]) {
    1..15: return CB_RESULT_IND_PROD_NO_CHANGE;
    close_production;
}

switch(FEAT_INDUSTRIES, SELF, roll_ruin_2, modifier, [
    roll_12() + modifier
]) {
    1..14: return CB_RESULT_IND_PROD_NO_CHANGE;
    decay_production;
}

switch(FEAT_INDUSTRIES, SELF, roll_ruin_3, modifier, [
    roll_12() + modifier
]) {
    1..11: return CB_RESULT_IND_PROD_NO_CHANGE;
    decay_production;
}

switch(FEAT_INDUSTRIES, SELF, roll_ruin_4, modifier, [
    roll_12() + modifier
]) {
    1..8: return CB_RESULT_IND_PROD_NO_CHANGE;
    decay_production;
}

switch(FEAT_INDUSTRIES, SELF, roll_ruin_5, modifier, [
    roll_12() + modifier
]) {
    1..4: return CB_RESULT_IND_PROD_NO_CHANGE;
    decay_production;
}

switch(FEAT_INDUSTRIES, SELF, roll_ruin_6, modifier, [
    roll_12() + modifier
]) {
    1..2: return CB_RESULT_IND_PROD_NO_CHANGE;
    decay_production;
}

switch(FEAT_INDUSTRIES, SELF, roll_progress_1, modifier, [
    roll_12() + modifier
]) {
    1..4: return CB_RESULT_IND_PROD_NO_CHANGE;
    grow_production;
}

switch(FEAT_INDUSTRIES, SELF, roll_progress_2, modifier, [
    roll_12() + modifier
]) {
    1..8: return CB_RESULT_IND_PROD_NO_CHANGE;
    grow_production;
}

switch(FEAT_INDUSTRIES, SELF, roll_progress_3, modifier, [
    roll_12() + modifier
]) {
    1..11: return CB_RESULT_IND_PROD_NO_CHANGE;
    grow_production;
}

switch(FEAT_INDUSTRIES, SELF, roll_progress_4, modifier, [
    roll_12() + modifier
]) {
    1..14: return CB_RESULT_IND_PROD_NO_CHANGE;
    grow_production;
}

switch(FEAT_INDUSTRIES, SELF, roll_progress_5, modifier, [
    roll_12() + modifier
]) {
    1..15: return CB_RESULT_IND_PROD_NO_CHANGE;
    grow_production;
}

switch(FEAT_INDUSTRIES, SELF, do_seasonal_ruin_update, [
    LOAD_PERM(87)
]) {
    1: roll_ruin_1(LOAD_PERM(85)-1);
    2: roll_ruin_2(LOAD_PERM(85)-1);
    3: roll_ruin_3(LOAD_PERM(85)-1);
    4: roll_ruin_4(LOAD_PERM(85)-1);
    5: roll_ruin_5(LOAD_PERM(85)-1);
    6: roll_ruin_6(LOAD_PERM(85)-1);
    return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, do_seasonal_progress_update, [
    LOAD_PERM(87)
]) {
    1: roll_progress_1(LOAD_PERM(86)-1);
    2: roll_progress_2(LOAD_PERM(86)-1);
    3: roll_progress_3(LOAD_PERM(86)-1);
    4: roll_progress_4(LOAD_PERM(86)-1);
    5: roll_progress_5(LOAD_PERM(86)-1);
    return CB_RESULT_IND_PROD_NO_CHANGE;
}

switch(FEAT_INDUSTRIES, SELF, check_seasonal_ruin_update, [
    LOAD_PERM(85)
]) {
    0..1: return CB_RESULT_IND_PROD_NO_CHANGE;
    do_seasonal_ruin_update;
}

switch(FEAT_INDUSTRIES, SELF, check_seasonal_progress_update, [
    LOAD_PERM(86)
]) {
    0..1: return CB_RESULT_IND_PROD_NO_CHANGE;
    do_seasonal_progress_update;
}

switch(FEAT_INDUSTRIES, SELF, increment_ruin, [
    STORE_PERM(LOAD_PERM(85)+1, 85),
    STORE_PERM(0, 86)
]) {
    return;
}

switch(FEAT_INDUSTRIES, SELF, increment_progress, [
    STORE_PERM(LOAD_PERM(86)+1, 86),
    STORE_PERM(0, 85)
]) {
    return;
}

switch(FEAT_INDUSTRIES, SELF, do_seasonal_activity_update, [
    get_level()
]) {
    1: increment_ruin;
    increment_progress;
}

switch(FEAT_INDUSTRIES, SELF, do_seasonal_prod_update, [
    do_seasonal_activity_update(),
    LOAD_PERM(86)
]) {
    0: check_seasonal_ruin_update;
    check_seasonal_progress_update;
}

switch(FEAT_INDUSTRIES, SELF, check_seasonal_prod_update, inc_msg, dec_msg, [
    STORE_TEMP(inc_msg, 126),
    STORE_TEMP(dec_msg, 127),
    STORE_PERM((LOAD_PERM(89)+1)%3, 89),
    LOAD_PERM(89)
]) {
    0: do_seasonal_prod_update;
    return CB_RESULT_IND_PROD_NO_CHANGE; 
}

random_switch(FEAT_INDUSTRIES, SELF, randomize_production) {
    1: return 7;
    2: return 8;
    4: return 9;
    8: return 10;
    4: return 11;
    2: return 12;
    1: return 13;
}

switch(FEAT_INDUSTRIES, SELF, initialize_industry, [
    STORE_PERM(industry_starting_power, 87),
    STORE_PERM(randomize_production(), 88)
]) {
    return 16;
}

// ----------------------------------------------------------------
// Industry Definitions
// ----------------------------------------------------------------

produce(produce_regular_port, 
    [],
    [ENGS:apply_production_modifiers(12, 1);SALT:apply_production_modifiers(8, 1);],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_port, production_cycle_tick()) {
    produce_regular_port;
}

item (FEAT_INDUSTRIES, industry_port) {
    property {
        substitute: 0x00;
        name: string(STR_INDUSTRY_NAME_PORT);
        nearby_station_name: string(STR_INDUSTRY_STATION_PORT);
        life_type: IND_LIFE_TYPE_EXTRACTIVE;
        cargo_types: [
            produce_cargo("ENGS", 0),
            produce_cargo("SALT", 0)
        ];
        spec_flags: bitmask(IND_FLAG_BUILT_ON_WATER);
        new_ind_msg: string(STR_INDUSTRY_PLANTED_PORT);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PORT);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PORT);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PORT);
        prob_in_game: 2;
        prob_map_gen: 4;
        fund_cost_multiplier: 150;
        prospect_chance: 0.75;
        map_colour: 146;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        extra_text_industry: extra_text_generic;
        build_prod_change: initialize_industry;
        produce_256_ticks: produce_256_ticks_port;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}

produce(produce_accept_quarry,
    [ENGS: LOAD_TEMP(0);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_quarry, [
    STORE_TEMP(incoming_cargo_waiting("ENGS"), 0),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("ENGS"), 0, 0), 4)
]) {
    produce_accept_quarry;
}

produce(produce_regular_quarry, 
    [],
    [SAND: apply_production_modifiers(12, LOAD_PERM(90)); PTSH: apply_production_modifiers(8,LOAD_PERM(90));],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_quarry, production_cycle_tick()) {
    produce_regular_quarry;
}

item (FEAT_INDUSTRIES, industry_quarry) {
    property {
        substitute: 0x01;
        name: string(STR_INDUSTRY_NAME_QUARRY);
        nearby_station_name: string(STR_INDUSTRY_STATION_QUARRY);
        life_type: IND_LIFE_TYPE_EXTRACTIVE;
        cargo_types: [
            accept_cargo("ENGS"),
            produce_cargo("SAND", 0),
            produce_cargo("PTSH", 0)
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_QUARRY);
        closure_msg: string(STR_INDUSTRY_CLOSURE_QUARRY);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_QUARRY);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_QUARRY);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 200;
        prospect_chance: 0.75;
        map_colour: 33;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        build_prod_change: initialize_industry;
        produce_256_ticks: produce_256_ticks_quarry;
        produce_cargo_arrival: produce_cargo_arrival_quarry;
        extra_text_industry: extra_text_industry_engineering;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}

produce(produce_accept_mineral_mine,
    [ENGS: LOAD_TEMP(0);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_mineral_mine, [
    STORE_TEMP(incoming_cargo_waiting("ENGS"), 0),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("ENGS"), 0, 0), 4)
]) {
    produce_accept_mineral_mine;
}

produce(produce_regular_mineral_mine, 
    [], 
    [MNRL: apply_production_modifiers(16, LOAD_PERM(90));],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_mineral_mine, production_cycle_tick()) {
    produce_regular_mineral_mine;
}

item (FEAT_INDUSTRIES, industry_mineral_mine) {
    property {
        substitute: 0x02;
        name: string(STR_INDUSTRY_NAME_MINERAL_MINE);
        nearby_station_name: string(STR_INDUSTRY_STATION_MINERAL_MINE);
        life_type: IND_LIFE_TYPE_EXTRACTIVE;
        cargo_types: [
            accept_cargo("ENGS"),
            produce_cargo("MNRL", 0),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_MINERAL_MINE);
        closure_msg: string(STR_INDUSTRY_CLOSURE_MINERAL_MINE);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_MINERAL_MINE);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_MINERAL_MINE);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 200;
        prospect_chance: 0.75;
        map_colour: 41;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        build_prod_change: initialize_industry;
        produce_256_ticks: produce_256_ticks_mineral_mine;
        produce_cargo_arrival: produce_cargo_arrival_mineral_mine;
        extra_text_industry: extra_text_industry_engineering;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}

produce(produce_accept_corn_farm,
    [FERT: LOAD_TEMP(0);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_corn_farm, [
    STORE_TEMP(incoming_cargo_waiting("FERT"), 0),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("FERT"), 0, 0), 4),
]) {
    produce_accept_corn_farm;
}

produce(produce_regular_corn_farm, 
    [], 
    [CORN: apply_production_modifiers(16, LOAD_PERM(90));],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_corn_farm, production_cycle_tick()) {
    produce_regular_corn_farm;
}

item (FEAT_INDUSTRIES, industry_corn_farm) {
    property {
        substitute: 0x03;
        name: string(STR_INDUSTRY_NAME_CORN_FARM);
        nearby_station_name: string(STR_INDUSTRY_STATION_CORN_FARM);
        life_type: IND_LIFE_TYPE_ORGANIC;
        cargo_types: [
            accept_cargo("FERT"),
            produce_cargo("CORN", 0),
        ];
        spec_flags: bitmask(IND_FLAG_PLANT_FIELDS_PERIODICALLY, IND_FLAG_PLANT_FIELDS_WHEN_BUILT);
        new_ind_msg: string(STR_INDUSTRY_PLANTED_CORN_FARM);
        closure_msg: string(STR_INDUSTRY_CLOSURE_CORN_FARM);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_CORN_FARM);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_CORN_FARM);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 50;
        prospect_chance: 0.75;
        map_colour: 66;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        build_prod_change: initialize_industry;
        produce_256_ticks: produce_256_ticks_corn_farm;
        produce_cargo_arrival: produce_cargo_arrival_corn_farm;
        extra_text_industry: extra_text_industry_fertilizer;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}

produce(produce_accept_soy_farm,
    [FERT: LOAD_TEMP(0);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_soy_farm, [
    STORE_TEMP(incoming_cargo_waiting("FERT"), 0),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("FERT"), 0, 0), 4),
]) {
    produce_accept_soy_farm;
}

produce(produce_regular_soy_farm, 
    [], 
    [SOYB: apply_production_modifiers(12, LOAD_PERM(90));],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_soy_farm, production_cycle_tick()) {
    produce_regular_soy_farm;
}

item (FEAT_INDUSTRIES, industry_soy_farm) {
    property {
        substitute: 0x04;
        name: string(STR_INDUSTRY_NAME_SOY_FARM);
        nearby_station_name: string(STR_INDUSTRY_STATION_SOY_FARM);
        life_type: IND_LIFE_TYPE_ORGANIC;
        cargo_types: [
            accept_cargo("FERT"),
            produce_cargo("SOYB", 0),
        ];
        spec_flags: bitmask(IND_FLAG_PLANT_FIELDS_PERIODICALLY, IND_FLAG_PLANT_FIELDS_WHEN_BUILT);
        new_ind_msg: string(STR_INDUSTRY_PLANTED_SOY_FARM);
        closure_msg: string(STR_INDUSTRY_CLOSURE_SOY_FARM);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_SOY_FARM);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_SOY_FARM);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 50;
        prospect_chance: 0.75;
        map_colour: 71;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        build_prod_change: initialize_industry;
        produce_256_ticks: produce_256_ticks_soy_farm;
        produce_cargo_arrival: produce_cargo_arrival_soy_farm;
        extra_text_industry: extra_text_industry_fertilizer;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}

produce(produce_accept_yam_farm,
    [FERT: LOAD_TEMP(0);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_yam_farm, [
    STORE_TEMP(incoming_cargo_waiting("FERT"), 0),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("FERT"), 0, 0), 4),
]) {
    produce_accept_yam_farm;
}

produce(produce_regular_yam_farm, 
    [], 
    [YAMS: apply_production_modifiers(12, LOAD_PERM(90));],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_yam_farm, production_cycle_tick()) {
    produce_regular_yam_farm;
}

item (FEAT_INDUSTRIES, industry_yam_farm) {
    property {
        substitute: 0x05;
        name: string(STR_INDUSTRY_NAME_YAM_FARM);
        nearby_station_name: string(STR_INDUSTRY_STATION_YAM_FARM);
        life_type: IND_LIFE_TYPE_ORGANIC;
        cargo_types: [
            accept_cargo("FERT"),
            produce_cargo("YAMS", 0),
        ];
        spec_flags: bitmask(IND_FLAG_PLANT_FIELDS_PERIODICALLY, IND_FLAG_PLANT_FIELDS_WHEN_BUILT);
        new_ind_msg: string(STR_INDUSTRY_PLANTED_YAM_FARM);
        closure_msg: string(STR_INDUSTRY_CLOSURE_YAM_FARM);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_YAM_FARM);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_YAM_FARM);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 50;
        prospect_chance: 0.75;
        map_colour: 75;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        build_prod_change: initialize_industry;
        produce_256_ticks: produce_256_ticks_yam_farm;
        produce_cargo_arrival: produce_cargo_arrival_yam_farm;
        extra_text_industry: extra_text_industry_fertilizer;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}

produce(produce_accept_glassworks,
    [SAND: LOAD_TEMP(0);],
    [VIAL: LOAD_TEMP(4) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_glassworks, [
    STORE_TEMP(incoming_cargo_waiting("SAND"), 0),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("SAND"), 0, 0), 4),
]) {
    produce_accept_glassworks;
}

produce(produce_regular_glassworks, 
    [], 
    [VIAL:apply_production_modifiers(6, 1);],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_glassworks, production_cycle_tick()) {
    produce_regular_glassworks;
}

item (FEAT_INDUSTRIES, industry_glassworks) {
    property {
        substitute: 0x06;
        name: string(STR_INDUSTRY_NAME_GLASSWORKS);
        nearby_station_name: string(STR_INDUSTRY_STATION_GLASSWORKS);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("SAND"),
            produce_cargo("VIAL", 0),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_GLASSWORKS);
        closure_msg: string(STR_INDUSTRY_CLOSURE_GLASSWORKS);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_GLASSWORKS);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_GLASSWORKS);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 135;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry;
        monthly_prod_change: check_seasonal_prod_update(string(STR_INDUSTRY_PRODUCTION_INCREASE_GLASSWORKS), string(STR_INDUSTRY_PRODUCTION_DECREASE_GLASSWORKS));
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_glassworks;
        produce_cargo_arrival: produce_cargo_arrival_glassworks;
        cargo_subtype_display: cargo_subtype_display_industry;
        extra_text_industry: extra_text_generic;
    }
}

produce(produce_accept_chemical_plant,
    [SALT: LOAD_TEMP(0); PTSH: LOAD_TEMP(1); MNRL: LOAD_TEMP(2);],
    [FERT: LOAD_TEMP(4) * LOAD_PERM(91) / 4; CHEM: LOAD_TEMP(4) * LOAD_PERM(91) / 4;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_chemical_plant, [
    STORE_TEMP(incoming_cargo_waiting("SALT"), 0),
    STORE_TEMP(incoming_cargo_waiting("PTSH"), 1),
    STORE_TEMP(incoming_cargo_waiting("MNRL"), 2),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("SALT"), incoming_cargo_waiting("PTSH"), incoming_cargo_waiting("MNRL")), 4),
]) {
    produce_accept_chemical_plant;
}

produce(produce_regular_chemical_plant, 
    [], 
    [FERT: apply_production_modifiers(6, LOAD_PERM(91)); CHEM: apply_production_modifiers(4, LOAD_PERM(91));],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_chemical_plant, production_cycle_tick()) {
    produce_regular_chemical_plant;
}

item (FEAT_INDUSTRIES, industry_chemical_plant) {
    property {
        substitute: 0x07;
        name: string(STR_INDUSTRY_NAME_CHEMICAL_PLANT);
        nearby_station_name: string(STR_INDUSTRY_STATION_CHEMICAL_PLANT);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("SALT"),
            accept_cargo("PTSH"),
            accept_cargo("MNRL"),
            produce_cargo("FERT", 0),
            produce_cargo("CHEM", 0)
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_CHEMICAL_PLANT);
        closure_msg: string(STR_INDUSTRY_CLOSURE_CHEMICAL_PLANT);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_CHEMICAL_PLANT);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_CHEMICAL_PLANT);
        prob_in_game: 6;
        prob_map_gen: 9;
        fund_cost_multiplier: 100;
        map_colour: 185;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry;
        monthly_prod_change: check_seasonal_prod_update(string(STR_INDUSTRY_PRODUCTION_INCREASE_CHEMICAL_PLANT), string(STR_INDUSTRY_PRODUCTION_DECREASE_CHEMICAL_PLANT));
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_chemical_plant;
        produce_cargo_arrival: produce_cargo_arrival_chemical_plant;
        extra_text_industry: extra_text_industry_triple;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}

produce(produce_accept_biolab,
    [CORN: LOAD_TEMP(0);],
    [VGOL: LOAD_TEMP(4) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_biolab, [
    STORE_TEMP(incoming_cargo_waiting("CORN"), 0),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("CORN"), 0, 0), 4),
]) {
    produce_accept_biolab;
}

produce(produce_regular_biolab, 
    [], 
    [VGOL:apply_production_modifiers(6, 1);],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_biolab, production_cycle_tick()) {
    produce_regular_biolab;
}

item (FEAT_INDUSTRIES, industry_biolab) {
    property {
        substitute: 0x08;
        name: string(STR_INDUSTRY_NAME_BIOLAB);
        nearby_station_name: string(STR_INDUSTRY_STATION_BIOLAB);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("CORN"),
            produce_cargo("VGOL", 0),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_BIOLAB);
        closure_msg: string(STR_INDUSTRY_CLOSURE_BIOLAB);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_BIOLAB);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_BIOLAB);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 206;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry;
        monthly_prod_change: check_seasonal_prod_update(string(STR_INDUSTRY_PRODUCTION_INCREASE_BIOLAB), string(STR_INDUSTRY_PRODUCTION_DECREASE_BIOLAB));
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_biolab;
        produce_cargo_arrival: produce_cargo_arrival_biolab;
        cargo_subtype_display: cargo_subtype_display_industry;
        extra_text_industry: extra_text_generic;
    }
}

produce(produce_accept_distillery,
    [CORN: LOAD_TEMP(0);],
    [ALCH: LOAD_TEMP(4) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_distillery, [
    STORE_TEMP(incoming_cargo_waiting("CORN"), 0),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("CORN"), 0, 0), 4),
]) {
    produce_accept_distillery;
}

produce(produce_regular_distillery, 
    [], 
    [ALCH:apply_production_modifiers(6, 1);],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_distillery, production_cycle_tick()) {
    produce_regular_distillery;
}

item (FEAT_INDUSTRIES, industry_distillery) {
    property {
        substitute: 0x09;
        name: string(STR_INDUSTRY_NAME_DISTILLERY);
        nearby_station_name: string(STR_INDUSTRY_STATION_DISTILLERY);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("CORN"),
            produce_cargo("ALCH", 0),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_DISTILLERY);
        closure_msg: string(STR_INDUSTRY_CLOSURE_DISTILLERY);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_DISTILLERY);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_DISTILLERY);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 192;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry;
        monthly_prod_change: check_seasonal_prod_update(string(STR_INDUSTRY_PRODUCTION_INCREASE_DISTILLERY), string(STR_INDUSTRY_PRODUCTION_DECREASE_DISTILLERY));
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_distillery;
        produce_cargo_arrival: produce_cargo_arrival_distillery;
        cargo_subtype_display: cargo_subtype_display_industry;
        extra_text_industry: extra_text_generic;
    }
}

produce(produce_accept_processing_plant,
    [SOYB: LOAD_TEMP(0); YAMS: LOAD_TEMP(1); ALCH: LOAD_TEMP(2);],
    [DIOS: LOAD_TEMP(4) * LOAD_PERM(91) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_processing_plant, [
    STORE_TEMP(incoming_cargo_waiting("SOYB"), 0),
    STORE_TEMP(incoming_cargo_waiting("YAMS"), 1),
    STORE_TEMP(incoming_cargo_waiting("ALCH"), 2),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("SOYB"), incoming_cargo_waiting("YAMS"), incoming_cargo_waiting("ALCH")), 4),
]) {
    produce_accept_processing_plant;
}

produce(produce_regular_processing_plant, 
    [], 
    [DIOS: apply_production_modifiers(6, 1);],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_processing_plant, production_cycle_tick()) {
    produce_regular_processing_plant;
}

item (FEAT_INDUSTRIES, industry_processing_plant) {
    property {
        substitute: 0x0A;
        name: string(STR_INDUSTRY_NAME_PROCESSING_PLANT);
        nearby_station_name: string(STR_INDUSTRY_STATION_PROCESSING_PLANT);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("SOYB"),
            accept_cargo("YAMS"),
            accept_cargo("ALCH"),
            produce_cargo("DIOS", 0),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_PROCESSING_PLANT);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PROCESSING_PLANT);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PROCESSING_PLANT);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PROCESSING_PLANT);
        prob_in_game: 6;
        prob_map_gen: 9;
        fund_cost_multiplier: 100;
        map_colour: 174;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry;
        monthly_prod_change: check_seasonal_prod_update(string(STR_INDUSTRY_PRODUCTION_INCREASE_PROCESSING_PLANT), string(STR_INDUSTRY_PRODUCTION_DECREASE_PROCESSING_PLANT));
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_processing_plant;
        produce_cargo_arrival: produce_cargo_arrival_processing_plant;
        extra_text_industry: extra_text_industry_triple;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}

produce(produce_accept_pharmaceutical_plant_e,
    [DIOS: LOAD_TEMP(0); CHEM: LOAD_TEMP(1);],
    [RWES: LOAD_TEMP(4) * LOAD_PERM(91) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_pharmaceutical_plant_e, [
    STORE_TEMP(incoming_cargo_waiting("DIOS"), 0),
    STORE_TEMP(incoming_cargo_waiting("CHEM"), 1),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("DIOS"), incoming_cargo_waiting("CHEM"), 0), 4),
]) {
    produce_accept_pharmaceutical_plant_e;
}

produce(produce_regular_pharmaceutical_plant_e, 
    [], 
    [RWES: apply_production_modifiers(6, 1);],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_pharmaceutical_plant_e, production_cycle_tick()) {
    produce_regular_pharmaceutical_plant_e;
}

item (FEAT_INDUSTRIES, industry_pharmaceutical_plant_e) {
    property {
        substitute: 0x0B;
        name: string(STR_INDUSTRY_NAME_PHARMACEUTICAL_PLANT_E);
        nearby_station_name: string(STR_INDUSTRY_STATION_PHARMACEUTICAL_PLANT_E);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("DIOS"),
            accept_cargo("CHEM"),
            produce_cargo("RWES", 0),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_PHARMACEUTICAL_PLANT_E);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PHARMACEUTICAL_PLANT_E);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PHARMACEUTICAL_PLANT_E);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PHARMACEUTICAL_PLANT_E);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 152;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry;
        monthly_prod_change: check_seasonal_prod_update(string(STR_INDUSTRY_PRODUCTION_INCREASE_PHARMACEUTICAL_PLANT_E), string(STR_INDUSTRY_PRODUCTION_DECREASE_PHARMACEUTICAL_PLANT_E));
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_pharmaceutical_plant_e;
        produce_cargo_arrival: produce_cargo_arrival_pharmaceutical_plant_e;
        construction_probability: availability_in_estrogen;
        extra_text_industry: extra_text_industry_double;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}

produce(produce_accept_pharmaceutical_plant_t,
    [DIOS: LOAD_TEMP(0); CHEM: LOAD_TEMP(1);],
    [RWTS: LOAD_TEMP(4) * LOAD_PERM(91) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_pharmaceutical_plant_t, [
    STORE_TEMP(incoming_cargo_waiting("DIOS"), 0),
    STORE_TEMP(incoming_cargo_waiting("CHEM"), 1),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("DIOS"), incoming_cargo_waiting("CHEM"), 0), 4),
]) {
    produce_accept_pharmaceutical_plant_t;
}

produce(produce_regular_pharmaceutical_plant_t, 
    [], 
    [RWTS: apply_production_modifiers(6, LOAD_PERM(91));],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_pharmaceutical_plant_t, production_cycle_tick()) {
    produce_regular_pharmaceutical_plant_t;
}

item (FEAT_INDUSTRIES, industry_pharmaceutical_plant_t) {
    property {
        substitute: 0x0C;
        name: string(STR_INDUSTRY_NAME_PHARMACEUTICAL_PLANT_T);
        nearby_station_name: string(STR_INDUSTRY_STATION_PHARMACEUTICAL_PLANT_T);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("DIOS"),
            accept_cargo("CHEM"),
            produce_cargo("RWTS", 0),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_PHARMACEUTICAL_PLANT_T);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PHARMACEUTICAL_PLANT_T);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PHARMACEUTICAL_PLANT_T);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PHARMACEUTICAL_PLANT_T);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 103;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry;
        monthly_prod_change: check_seasonal_prod_update(string(STR_INDUSTRY_PRODUCTION_INCREASE_PHARMACEUTICAL_PLANT_T), string(STR_INDUSTRY_PRODUCTION_DECREASE_PHARMACEUTICAL_PLANT_T));
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_pharmaceutical_plant_t;
        produce_cargo_arrival: produce_cargo_arrival_pharmaceutical_plant_t;
        construction_probability: availability_in_testosterone;
        extra_text_industry: extra_text_industry_double;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}

produce(produce_accept_pharmacy_e,
    [VIAL: LOAD_TEMP(0); VGOL: LOAD_TEMP(1); RWES: LOAD_TEMP(2);],
    [ESTR: LOAD_TEMP(4) * LOAD_PERM(91) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_pharmacy_e, [
    STORE_TEMP(incoming_cargo_waiting("VIAL"), 0),
    STORE_TEMP(incoming_cargo_waiting("VGOL"), 1),
    STORE_TEMP(incoming_cargo_waiting("RWES"), 2),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("VIAL"), incoming_cargo_waiting("VGOL"), incoming_cargo_waiting("RWES")), 4),
]) {
    produce_accept_pharmacy_e;
}

produce(produce_regular_pharmacy_e, 
    [], 
    [ESTR: apply_production_modifiers(6, LOAD_PERM(91));],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_pharmacy_e, production_cycle_tick()) {
    produce_regular_pharmacy_e;
}

item (FEAT_INDUSTRIES, industry_pharmacy_e) {
    property {
        substitute: 0x0D;
        name: string(STR_INDUSTRY_NAME_PHARMACY_E);
        nearby_station_name: string(STR_INDUSTRY_STATION_PHARMACY_E);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("VIAL"),
            accept_cargo("VGOL"),
            accept_cargo("RWES"),
            produce_cargo("ESTR", 0)
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_PHARMACY_E);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PHARMACY_E);
        prob_in_game: 6;
        prob_map_gen: 9;
        fund_cost_multiplier: 100;
        map_colour: 150;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry;
        monthly_prod_change: check_seasonal_prod_update(string(STR_INDUSTRY_PLANTED_PHARMACY_E), string(STR_INDUSTRY_CLOSURE_PHARMACY_E));
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_pharmacy_e;
        produce_cargo_arrival: produce_cargo_arrival_pharmacy_e;
        construction_probability: availability_in_estrogen;
        extra_text_industry: extra_text_industry_triple;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}


produce(produce_accept_pharamacy_t,
    [VIAL: LOAD_TEMP(0); VGOL: LOAD_TEMP(1); RWTS: LOAD_TEMP(2);],
    [TEST: LOAD_TEMP(4) * LOAD_PERM(91) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_pharamacy_t, [
    STORE_TEMP(incoming_cargo_waiting("VIAL"), 0),
    STORE_TEMP(incoming_cargo_waiting("VGOL"), 1),
    STORE_TEMP(incoming_cargo_waiting("RWES"), 2),
    STORE_TEMP(do_cargo_accept_cycle(incoming_cargo_waiting("VIAL"), incoming_cargo_waiting("VGOL"), incoming_cargo_waiting("RWTS")), 4),
]) {
    produce_accept_pharamacy_t;
}

produce(produce_regular_pharamacy_t, 
    [], 
    [TEST: apply_production_modifiers(6, LOAD_PERM(91));],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_pharamacy_t, production_cycle_tick()) {
    produce_regular_pharamacy_t;
}

item (FEAT_INDUSTRIES, industry_pharamacy_t) {
    property {
        substitute: 0x0E;
        name: string(STR_INDUSTRY_NAME_PHARMACY_T);
        nearby_station_name: string(STR_INDUSTRY_STATION_PHARMACY_T);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("VIAL"),
            accept_cargo("VGOL"),
            accept_cargo("RWTS"),
            produce_cargo("TEST", 0)
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_PHARMACY_T);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PHARMACY_T);
        prob_in_game: 6;
        prob_map_gen: 9;
        fund_cost_multiplier: 100;
        map_colour: 101;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry;
        monthly_prod_change: check_seasonal_prod_update(string(STR_INDUSTRY_PLANTED_PHARMACY_T), string(STR_INDUSTRY_CLOSURE_PHARMACY_T));
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_pharamacy_t;
        produce_cargo_arrival: produce_cargo_arrival_pharamacy_t;
        construction_probability: availability_in_testosterone;
        extra_text_industry: extra_text_industry_triple;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}

produce(produce_accept_gender_clinic_e,
    [ESTR: incoming_cargo_waiting("ESTR");],
    []
)

item (FEAT_INDUSTRIES, industry_gender_clinic_e) {
    property {
        substitute: 0x0F;
        name: string(STR_INDUSTRY_NAME_GENDER_CLINIC_E);
        nearby_station_name: string(STR_INDUSTRY_STATION_GENDER_CLINIC_E);
        life_type: IND_LIFE_TYPE_BLACK_HOLE;
        cargo_types: [
            accept_cargo("ESTR"),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_GENDER_CLINIC_E);
        closure_msg: string(STR_INDUSTRY_CLOSURE_GENDER_CLINIC_E);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 25;
        map_colour: 49;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        build_prod_change: initialize_industry;
        produce_cargo_arrival: produce_accept_gender_clinic_e;
        construction_probability: availability_in_estrogen;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}


produce(produce_accept_gender_clinic_t,
    [TEST: incoming_cargo_waiting("TEST");],
    []
)

item (FEAT_INDUSTRIES, industry_gender_clinic_t) {
    property {
        substitute: 0x10;
        name: string(STR_INDUSTRY_NAME_GENDER_CLINIC_T);
        nearby_station_name: string(STR_INDUSTRY_STATION_GENDER_CLINIC_T);
        life_type: IND_LIFE_TYPE_BLACK_HOLE;
        cargo_types: [
            accept_cargo("TEST"),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_GENDER_CLINIC_T);
        closure_msg: string(STR_INDUSTRY_CLOSURE_GENDER_CLINIC_T);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 25;
        map_colour: 48;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        build_prod_change: initialize_industry;
        produce_cargo_arrival: produce_accept_gender_clinic_t;
        construction_probability: availability_in_testosterone;
        cargo_subtype_display: cargo_subtype_display_industry;
    }
}