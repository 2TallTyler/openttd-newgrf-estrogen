grf {
    grfid: "AK\01\01";
    name: string(STR_GRF_NAME);
    desc: string(STR_GRF_DESCRIPTION);
    version: 0;
    min_compatible_version: 0;
    param 0 {
        hormone {
            type: int;
            name: string(STR_PARAM_NAME_HORMONE);
            desc: string(STR_PARAM_DESC_HORMONE);
            min_value: 0;
            max_value: 2;
            def_value: 0;
            names: {
                0: string(STR_PARAM_VALUE_HORMONE_ESTROGEN);
                1: string(STR_PARAM_VALUE_HORMONE_TESTOSTERONE);
                2: string(STR_PARAM_VALUE_HORMONE_BOTH);
            };
        }
    }
}

// ----------------------------------------------------------------
// Conventions
// ----------------------------------------------------------------

// BOOST_CARGO_FIRST    :Cargos that boost production should be listed first in all indexes.

// ----------------------------------------------------------------
// Settings
// ----------------------------------------------------------------

disable_item(FEAT_CARGOS, 1);
disable_item(FEAT_CARGOS, 3, 4);
disable_item(FEAT_CARGOS, 6, 11);
disable_item(FEAT_INDUSTRIES, 0, 36);
disable_item(FEAT_TRAINS, 27, 31);
disable_item(FEAT_TRAINS, 33, 53);
disable_item(FEAT_TRAINS, 59, 61);
disable_item(FEAT_TRAINS, 63, 83);
disable_item(FEAT_TRAINS, 89, 93);
disable_item(FEAT_TRAINS, 95, 115);
disable_item(FEAT_ROADVEHS, 7, 9);
disable_item(FEAT_ROADVEHS, 16, 21);
disable_item(FEAT_ROADVEHS, 25, 87);

switch (FEAT_INDUSTRIES, SELF, enabled_in_estrogen, hormone) {
    0: CB_RESULT_IND_ALLOW;
    1: CB_RESULT_IND_DISALLOW;
    2: CB_RESULT_IND_ALLOW;
    CB_RESULT_IND_DISALLOW;
}

switch (FEAT_INDUSTRIES, SELF, enabled_in_testosterone, hormone) {
    0: CB_RESULT_IND_DISALLOW;
    1: CB_RESULT_IND_ALLOW;
    2: CB_RESULT_IND_ALLOW;
    CB_RESULT_IND_DISALLOW;
}

// ----------------------------------------------------------------
// Cargo Definitions
// ----------------------------------------------------------------

item (FEAT_CARGOS, item_engineering_supplies) {
    property {
        number: 12;
        type_name: string(STR_CARGO_PLURAL_ENGINEERING_SUPPLIES);
        unit_name: string(STR_CARGO_SINGULAR_ENGINEERING_SUPPLIES);
        type_abbreviation: string(STR_CARGO_ABBREV_ENGINEERING_SUPPLIES);
        cargo_label: string(STR_CARGO_LABEL_ENGINEERING_SUPPLIES);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_ENGINEERING_SUPPLIES\);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 20;
        single_penalty_length: 40;
        price_factor: 110;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_fertilizer) {
    property {
        number: 13;
        type_name: string(STR_CARGO_PLURAL_FERTILIZER);
        unit_name: string(STR_CARGO_SINGULAR_FERTILIZER);
        type_abbreviation: string(STR_CARGO_ABBREV_FERTILIZER);
        cargo_label: string(STR_CARGO_LABEL_FERTILIZER);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_FERTILIZER\);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 20;
        single_penalty_length: 40;
        price_factor: 151;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_salt) {
    property {
        number: 14;
        type_name: string(STR_CARGO_PLURAL_SALT);
        unit_name: string(STR_CARGO_SINGULAR_SALT);
        type_abbreviation: string(STR_CARGO_ABBREV_SALT);
        cargo_label: string(STR_CARGO_LABEL_SALT);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_SALT\);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 100;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_potash) {
    property {
        number: 15;
        type_name: string(STR_CARGO_PLURAL_POTASH);
        unit_name: string(STR_CARGO_SINGULAR_POTASH);
        type_abbreviation: string(STR_CARGO_ABBREV_POTASH);
        cargo_label: string(STR_CARGO_LABEL_POTASH);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_POTASH\);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 100;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_sand) {
    property {
        number: 16;
        type_name: string(STR_CARGO_PLURAL_SAND);
        unit_name: string(STR_CARGO_SINGULAR_SAND);
        type_abbreviation: string(STR_CARGO_ABBREV_SAND);
        cargo_label: string(STR_CARGO_LABEL_SAND);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_SAND\);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 40;
        single_penalty_length: 255;
        price_factor: 100;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_minerals) {
    property {
        number: 17;
        type_name: string(STR_CARGO_PLURAL_MINERALS);
        unit_name: string(STR_CARGO_SINGULAR_MINERALS);
        type_abbreviation: string(STR_CARGO_ABBREV_MINERALS);
        cargo_label: string(STR_CARGO_LABEL_MINERALS);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_MINERALS\);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 100;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_corn) {
    property {
        number: 18;
        type_name: string(STR_CARGO_PLURAL_CORN);
        unit_name: string(STR_CARGO_SINGULAR_CORN);
        type_abbreviation: string(STR_CARGO_ABBREV_CORN);
        cargo_label: string(STR_CARGO_LABEL_CORN);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_CORN\);
        cargo_classes: bitmask(CC_COVERED, CC_BULK);
        penalty_lowerbound: 12;
        single_penalty_length: 40;
        price_factor: 90;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_soy) {
    property {
        number: 19;
        type_name: string(STR_CARGO_PLURAL_SOY);
        unit_name: string(STR_CARGO_SINGULAR_SOY);
        type_abbreviation: string(STR_CARGO_ABBREV_SOY);
        cargo_label: string(STR_CARGO_LABEL_SOY);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_SOY\);
        cargo_classes: bitmask(CC_COVERED, CC_BULK);
        penalty_lowerbound: 8;
        single_penalty_length: 24;
        price_factor: 117;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_yam) {
    property {
        number: 20;
        type_name: string(STR_CARGO_PLURAL_YAM);
        unit_name: string(STR_CARGO_SINGULAR_YAM);
        type_abbreviation: string(STR_CARGO_ABBREV_YAM);
        cargo_label: string(STR_CARGO_LABEL_YAM);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_YAM\);
        cargo_classes: bitmask(CC_COVERED, CC_BULK);
        penalty_lowerbound: 8;
        single_penalty_length: 24;
        price_factor: 117;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_vials) {
    property {
        number: 21;
        type_name: string(STR_CARGO_PLURAL_VIALS);
        unit_name: string(STR_CARGO_SINGULAR_VIALS);
        type_abbreviation: string(STR_CARGO_ABBREV_VIALS);
        cargo_label: string(STR_CARGO_LABEL_VIALS);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_VIALS\);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 16;
        single_penalty_length: 160;
        price_factor: 110;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_chemicals) {
    property {
        number: 22;
        type_name: string(STR_CARGO_PLURAL_CHEMICALS);
        unit_name: string(STR_CARGO_SINGULAR_CHEMICALS);
        type_abbreviation: string(STR_CARGO_ABBREV_CHEMICALS);
        cargo_label: string(STR_CARGO_LABEL_CHEMICALS);
        units_of_cargo: string(TTD_STR_LITERS);
        items_of_cargo: string(STR_CARGO_UNIT_CHEMICALS\);
        cargo_classes: bitmask(CC_LIQUID, CC_HAZARDOUS);
        penalty_lowerbound: 24;
        single_penalty_length: 48;
        price_factor: 148;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_vegetable_oil) {
    property {
        number: 23;
        type_name: string(STR_CARGO_PLURAL_VEGETABLE_OIL);
        unit_name: string(STR_CARGO_SINGULAR_VEGETABLE_OIL);
        type_abbreviation: string(STR_CARGO_ABBREV_VEGETABLE_OIL);
        cargo_label: string(STR_CARGO_LABEL_VEGETABLE_OIL);
        units_of_cargo: string(TTD_STR_LITERS);
        items_of_cargo: string(STR_CARGO_UNIT_VEGETABLE_OIL\);
        cargo_classes: bitmask(CC_LIQUID);
        penalty_lowerbound: 8;
        single_penalty_length: 36;
        price_factor: 124;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_alcohol) {
    property {
        number: 24;
        type_name: string(STR_CARGO_PLURAL_ALCOHOL);
        unit_name: string(STR_CARGO_SINGULAR_ALCOHOL);
        type_abbreviation: string(STR_CARGO_ABBREV_ALCOHOL);
        cargo_label: string(STR_CARGO_LABEL_ALCOHOL);
        units_of_cargo: string(TTD_STR_LITERS);
        items_of_cargo: string(STR_CARGO_UNIT_ALCOHOL\);
        cargo_classes: bitmask(CC_LIQUID);
        penalty_lowerbound: 12;
        single_penalty_length: 40;
        price_factor: 122;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_diosgenin) {
    property {
        number: 25;
        type_name: string(STR_CARGO_PLURAL_DIOSGENIN);
        unit_name: string(STR_CARGO_SINGULAR_DIOSGENIN);
        type_abbreviation: string(STR_CARGO_ABBREV_DIOSGENIN);
        cargo_label: string(STR_CARGO_LABEL_DIOSGENIN);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_DIOSGENIN\);
        cargo_classes: bitmask(CC_POWDERIZED);
        penalty_lowerbound: 32;
        single_penalty_length: 40;
        price_factor: 170;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_raw_estrone) {
    property {
        number: 26;
        type_name: string(STR_CARGO_PLURAL_RAW_ESTRONE);
        unit_name: string(STR_CARGO_SINGULAR_RAW_ESTRONE);
        type_abbreviation: string(STR_CARGO_ABBREV_RAW_ESTRONE);
        cargo_label: string(STR_CARGO_LABEL_RAW_ESTRONE);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_RAW_ESTRONE\);
        cargo_classes: bitmask(CC_POWDERIZED);
        penalty_lowerbound: 32;
        single_penalty_length: 140;
        price_factor: 160;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_raw_testosterone) {
    property {
        number: 27;
        type_name: string(STR_CARGO_PLURAL_RAW_TESTOSTERONE);
        unit_name: string(STR_CARGO_SINGULAR_RAW_TESTOSTERONE);
        type_abbreviation: string(STR_CARGO_ABBREV_RAW_TESTOSTERONE);
        cargo_label: string(STR_CARGO_LABEL_RAW_TESTOSTERONE);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_RAW_TESTOSTERONE\);
        cargo_classes: bitmask(CC_POWDERIZED);
        penalty_lowerbound: 32;
        single_penalty_length: 140;
        price_factor: 160;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_estrogen) {
    property {
        number: 28;
        type_name: string(STR_CARGO_PLURAL_ESTROGEN);
        unit_name: string(STR_CARGO_SINGULAR_ESTROGEN);
        type_abbreviation: string(STR_CARGO_ABBREV_ESTROGEN);
        cargo_label: string(STR_CARGO_LABEL_ESTROGEN);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_ESTROGEN\);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 12;
        single_penalty_length: 32;
        price_factor: 193;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

item (FEAT_CARGOS, item_testosterone) {
    property {
        number: 29;
        type_name: string(STR_CARGO_PLURAL_TESTOSTERONE);
        unit_name: string(STR_CARGO_SINGULAR_TESTOSTERONE);
        type_abbreviation: string(STR_CARGO_ABBREV_TESTOSTERONE);
        cargo_label: string(STR_CARGO_LABEL_TESTOSTERONE);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_TESTOSTERONE);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 13;
        single_penalty_length: 32;
        price_factor: 193;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: NEW_CARGO_SPRITE;
    }
    graphics {

    }
}

// ----------------------------------------------------------------
// Industry Addressing Reference
// ----------------------------------------------------------------
// PERM_000         :Production cycle index                                         [0..26]
// PERM_001..028    :Input Cargo 0 delivered last 27 cycles (+1 sum @ PERM_028)
// PERM_029..056    :Input Cargo 1 delivered last 27 cycles (+1 sum @ PERM_056)
// PERM_057..083    :Input Cargo 2 delivered last 27 cycles (+1 sum @ PERM_083)

// ----------------------------------------------------------------
// Industry Scripts
// ----------------------------------------------------------------

// TEMP_000         :Input cargo number
switch(FEAT_INDUSTRIES, SELF, production_cycle_tick_closer, [
    STORE_PERM(0, LOAD_TEMP(127)-28+LOAD_PERM(0)+1)   // Store 0 in this production cycle index's register
]) {
    return;
}

// TEMP_000         :Input cargo number         [0,1,2]
// TEMP_001         :Index offset of register to shift  [0..26]
switch(FEAT_INDUSTRIES, SELF, production_cycle_tick_cargo, [
    // Add current offset register to total for this input cargo
    STORE_PERM(LOAD_PERM(LOAD_TEMP(127))+LOAD_PERM(LOAD_TEMP(127)-28+LOAD_TEMP(1)+1), LOAD_TEMP(127))
    STORE_TEMP(LOAD_TEMP(1)+1, 1),              // Increment index offset
    LOAD_TEMP(1)                                // Make decision based off of index offset
]) {
    27: production_cycle_tick_closer;           // If index offset is 27, we're finished
    production_cycle_tick_cargo;                // Otherwise, recurse
}

// TEMP_000         :Input cargo number
// TEMP_001         :Index offset of register to shift
// TEMP_127         :Index of register containing total
switch(FEAT_INDUSTRIES, SELF, production_cycle_tick_helper, [
    STORE_PERM((LOAD_PERM(0)+1)%27, 0),         // Load production cycle index, increment, and mod 27
    STORE_TEMP(28*(1+LOAD_TEMP(0)), 127),       // Store index of sum register
    STORE_PERM(0, LOAD_TEMP(127)),              // Reset total
    STORE_TEMP(0, 1)                            // Store 0 in offset
]) {
    production_cycle_tick_cargo                 // Kick off recursive summation
}

// TEMP_000         :Input cargo number         [0,1,2]
switch(FEAT_INDUSTRIES, SELF, production_cycle_tick, [
    STORE_TEMP(0, 0),                           // Do input cargo 0
    production_cycle_tick_helper,
    STORE_TEMP(1, 0),                           // Do input cargo 1
    production_cycle_tick_helper,
    STORE_TEMP(2, 0),                           // Do input cargo 2
    production_cycle_tick_helper
]) {
    return;
}

// TEMP_000         :Input cargo number:        [0,1,2]
// TEMP_001         :Quantity of input cargo    n
// TEMP_127         :Index                      
switch(FEAT_INDUSTRIES, SELF, increment_accepted_cargo, [
    LOAD_TEMP(1+28*LOAD_TEMP(0)+LOAD_PERM(0), 127),                     // Get register representing production cycle
    STORE_PERM(LOAD_PERM(LOAD_TEMP(127))+LOAD_TEMP(1), LOAD_TEMP(127))  // Increment by quantity of input cargo
]) {
    return;
}

switch(FEAT_INDUSTRIES, SELF, engineering_supplies_multipler, LOAD_PERM(28)) {
    0..19: return 1;
    20..79: return 2;
    return 4;
}

switch(FEAT_INDUSTRIES, SELF, fertilizer_multiplier, LOAD_PERM(28)) {
    0..13: return 1;
    14..59: return 2;
    return 4;
}

produce(prod_port, 
    [], 
    [ENGS:1;SALT:1;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_port, 0) {
    prod_port;
}

// ----------------------------------------------------------------
// Industry Definitions
// ----------------------------------------------------------------

item (FEAT_INDUSTRIES, industry_port) {
    property {
        substitute: 0x25,
        name: string(STR_INDUSTRY_NAME_PORT);
        nearby_station_name: string(STR_INDUSTRY_STATION_PORT);
        life_type: IND_LIFE_TYPE_EXTRACTIVE;
        cargo_types: [
            produce_cargo("ENGS", 0),
            produce_cargo("SALT", 0)
        ];
        spec_flags: [IND_FLAG_BUILT_ON_WATER];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_PORT);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PORT);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PORT);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PORT);
        prob_random: 1;
        prob_map_gen: 1;
        prob_in_game: 1;
        fund_cost_multiplier: 1;
        prospect_chance: 1;
        min_cargo_distr: 1;
        conflicting_ind_types: [industry_type(IND_TYPE_NEW, )];
        layouts: [];
    }
    graphics {
        produce_256_ticks: produce_256_ticks_port;        
    }
}

item (FEAT_INDUSTRIES, industry_template) {
    property {
        name: string(STR_INDUSTRY_NAME_TEMPLATE);
        nearby_station_name: string(STR_INDUSTRY_STATION_TEMPLATE);
        life_type: IND_LIFE_TYPE_EXTRACTIVE;
        cargo_types: [
            produce_cargo("XXXX", 4),
            accept_cargo("XXXX"),
            produce_cargo("XXXX", 0),
            accept_cargo("XXXX", produce_cargo("XXXX", 1), produce_cargo("XXXX", 1))
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_TEMPLATE);
        closure_msg: string(STR_INDUSTRY_CLOSURE_TEMPLATE);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_TEMPLATE);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_TEMPLATE);
        prob_random: 1;
        prob_map_gen: 1;
        prob_in_game: 1;
        fund_cost_multiplier: 1;
        prospect_chance: 1;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [];
    }
}