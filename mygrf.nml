grf {
    grfid: "AK\01\01";
    name: string(STR_GRF_NAME);
    desc: string(STR_GRF_DESCRIPTION);
    version: 0;
    min_compatible_version: 0;
    param 0 {
        hormone {
            type: int;
            name: string(STR_PARAM_NAME_HORMONE);
            desc: string(STR_PARAM_DESC_HORMONE);
            min_value: 0;
            max_value: 2;
            def_value: 0;
            names: {
                0: string(STR_PARAM_VALUE_HORMONE_ESTROGEN);
                1: string(STR_PARAM_VALUE_HORMONE_TESTOSTERONE);
                2: string(STR_PARAM_VALUE_HORMONE_BOTH);
            };
        }
    }
}

// Listen. Yes, this is all in one file. That's just how openttd NML works, for some reason.
// Yes, I could build a basic templating program to do actual compartmentalization,
// But I'm lazy and this mod is supposed to be a meme, so one giant .nml file it is.

// ----------------------------------------------------------------
// Conventions
// ----------------------------------------------------------------

// BOOST_CARGO_FIRST    :Cargos that boost production should be listed first in all indexes.

// ----------------------------------------------------------------
// Settings
// ----------------------------------------------------------------

disable_item(FEAT_CARGOS, 1);
disable_item(FEAT_CARGOS, 3, 4);
disable_item(FEAT_CARGOS, 6, 11);
disable_item(FEAT_INDUSTRIES, 0, 36);
disable_item(FEAT_TRAINS, 27, 31);
disable_item(FEAT_TRAINS, 33, 53);
disable_item(FEAT_TRAINS, 59, 61);
disable_item(FEAT_TRAINS, 63, 83);
disable_item(FEAT_TRAINS, 89, 93);
disable_item(FEAT_TRAINS, 95, 115);
disable_item(FEAT_ROADVEHS, 7, 9);
disable_item(FEAT_ROADVEHS, 16, 21);
disable_item(FEAT_ROADVEHS, 25, 87);

switch(FEAT_INDUSTRIES, SELF, availability_default, 0) {
    CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
}

switch (FEAT_INDUSTRIES, SELF, availability_in_estrogen, hormone) {
    0: return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
    1: return CB_RESULT_IND_NO_CONSTRUCTION;
    2: return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
    CB_RESULT_IND_NO_CONSTRUCTION;
}

switch (FEAT_INDUSTRIES, SELF, availability_in_testosterone, hormone) {
    0: return CB_RESULT_IND_NO_CONSTRUCTION;
    1: return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
    2: return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
    CB_RESULT_IND_NO_CONSTRUCTION;
}

// ----------------------------------------------------------------
// Cargo Definitions
// ----------------------------------------------------------------

item (FEAT_CARGOS, item_engineering_supplies) {
    property {
        number: 12;
        type_name: string(STR_CARGO_PLURAL_ENGINEERING_SUPPLIES);
        unit_name: string(STR_CARGO_SINGULAR_ENGINEERING_SUPPLIES);
        type_abbreviation: string(STR_CARGO_ABBREV_ENGINEERING_SUPPLIES);
        cargo_label: string(STR_CARGO_LABEL_ENGINEERING_SUPPLIES);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_ENGINEERING_SUPPLIES\);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 20;
        single_penalty_length: 40;
        price_factor: 110;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_fertilizer) {
    property {
        number: 13;
        type_name: string(STR_CARGO_PLURAL_FERTILIZER);
        unit_name: string(STR_CARGO_SINGULAR_FERTILIZER);
        type_abbreviation: string(STR_CARGO_ABBREV_FERTILIZER);
        cargo_label: string(STR_CARGO_LABEL_FERTILIZER);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_FERTILIZER\);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 20;
        single_penalty_length: 40;
        price_factor: 151;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_salt) {
    property {
        number: 14;
        type_name: string(STR_CARGO_PLURAL_SALT);
        unit_name: string(STR_CARGO_SINGULAR_SALT);
        type_abbreviation: string(STR_CARGO_ABBREV_SALT);
        cargo_label: string(STR_CARGO_LABEL_SALT);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_SALT\);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 100;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_potash) {
    property {
        number: 15;
        type_name: string(STR_CARGO_PLURAL_POTASH);
        unit_name: string(STR_CARGO_SINGULAR_POTASH);
        type_abbreviation: string(STR_CARGO_ABBREV_POTASH);
        cargo_label: string(STR_CARGO_LABEL_POTASH);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_POTASH\);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 100;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_sand) {
    property {
        number: 16;
        type_name: string(STR_CARGO_PLURAL_SAND);
        unit_name: string(STR_CARGO_SINGULAR_SAND);
        type_abbreviation: string(STR_CARGO_ABBREV_SAND);
        cargo_label: string(STR_CARGO_LABEL_SAND);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_SAND\);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 40;
        single_penalty_length: 255;
        price_factor: 100;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_minerals) {
    property {
        number: 17;
        type_name: string(STR_CARGO_PLURAL_MINERALS);
        unit_name: string(STR_CARGO_SINGULAR_MINERALS);
        type_abbreviation: string(STR_CARGO_ABBREV_MINERALS);
        cargo_label: string(STR_CARGO_LABEL_MINERALS);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_MINERALS\);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 100;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_corn) {
    property {
        number: 18;
        type_name: string(STR_CARGO_PLURAL_CORN);
        unit_name: string(STR_CARGO_SINGULAR_CORN);
        type_abbreviation: string(STR_CARGO_ABBREV_CORN);
        cargo_label: string(STR_CARGO_LABEL_CORN);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_CORN\);
        cargo_classes: bitmask(CC_COVERED, CC_BULK);
        penalty_lowerbound: 12;
        single_penalty_length: 40;
        price_factor: 90;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_soy) {
    property {
        number: 19;
        type_name: string(STR_CARGO_PLURAL_SOY);
        unit_name: string(STR_CARGO_SINGULAR_SOY);
        type_abbreviation: string(STR_CARGO_ABBREV_SOY);
        cargo_label: string(STR_CARGO_LABEL_SOY);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_SOY\);
        cargo_classes: bitmask(CC_COVERED, CC_BULK);
        penalty_lowerbound: 8;
        single_penalty_length: 24;
        price_factor: 117;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_yam) {
    property {
        number: 20;
        type_name: string(STR_CARGO_PLURAL_YAM);
        unit_name: string(STR_CARGO_SINGULAR_YAM);
        type_abbreviation: string(STR_CARGO_ABBREV_YAM);
        cargo_label: string(STR_CARGO_LABEL_YAM);
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_YAM\);
        cargo_classes: bitmask(CC_COVERED, CC_BULK);
        penalty_lowerbound: 8;
        single_penalty_length: 24;
        price_factor: 117;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_vials) {
    property {
        number: 21;
        type_name: string(STR_CARGO_PLURAL_VIALS);
        unit_name: string(STR_CARGO_SINGULAR_VIALS);
        type_abbreviation: string(STR_CARGO_ABBREV_VIALS);
        cargo_label: string(STR_CARGO_LABEL_VIALS);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_VIALS\);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 16;
        single_penalty_length: 160;
        price_factor: 110;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_chemicals) {
    property {
        number: 22;
        type_name: string(STR_CARGO_PLURAL_CHEMICALS);
        unit_name: string(STR_CARGO_SINGULAR_CHEMICALS);
        type_abbreviation: string(STR_CARGO_ABBREV_CHEMICALS);
        cargo_label: string(STR_CARGO_LABEL_CHEMICALS);
        units_of_cargo: string(TTD_STR_LITERS);
        items_of_cargo: string(STR_CARGO_UNIT_CHEMICALS\);
        cargo_classes: bitmask(CC_LIQUID, CC_HAZARDOUS);
        penalty_lowerbound: 24;
        single_penalty_length: 48;
        price_factor: 148;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_vegetable_oil) {
    property {
        number: 23;
        type_name: string(STR_CARGO_PLURAL_VEGETABLE_OIL);
        unit_name: string(STR_CARGO_SINGULAR_VEGETABLE_OIL);
        type_abbreviation: string(STR_CARGO_ABBREV_VEGETABLE_OIL);
        cargo_label: string(STR_CARGO_LABEL_VEGETABLE_OIL);
        units_of_cargo: string(TTD_STR_LITERS);
        items_of_cargo: string(STR_CARGO_UNIT_VEGETABLE_OIL\);
        cargo_classes: bitmask(CC_LIQUID);
        penalty_lowerbound: 8;
        single_penalty_length: 36;
        price_factor: 124;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_alcohol) {
    property {
        number: 24;
        type_name: string(STR_CARGO_PLURAL_ALCOHOL);
        unit_name: string(STR_CARGO_SINGULAR_ALCOHOL);
        type_abbreviation: string(STR_CARGO_ABBREV_ALCOHOL);
        cargo_label: string(STR_CARGO_LABEL_ALCOHOL);
        units_of_cargo: string(TTD_STR_LITERS);
        items_of_cargo: string(STR_CARGO_UNIT_ALCOHOL\);
        cargo_classes: bitmask(CC_LIQUID);
        penalty_lowerbound: 12;
        single_penalty_length: 40;
        price_factor: 122;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_diosgenin) {
    property {
        number: 25;
        type_name: string(STR_CARGO_PLURAL_DIOSGENIN);
        unit_name: string(STR_CARGO_SINGULAR_DIOSGENIN);
        type_abbreviation: string(STR_CARGO_ABBREV_DIOSGENIN);
        cargo_label: string(STR_CARGO_LABEL_DIOSGENIN);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_DIOSGENIN\);
        cargo_classes: bitmask(CC_POWDERIZED);
        penalty_lowerbound: 32;
        single_penalty_length: 40;
        price_factor: 170;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_raw_estrone) {
    property {
        number: 26;
        type_name: string(STR_CARGO_PLURAL_RAW_ESTRONE);
        unit_name: string(STR_CARGO_SINGULAR_RAW_ESTRONE);
        type_abbreviation: string(STR_CARGO_ABBREV_RAW_ESTRONE);
        cargo_label: string(STR_CARGO_LABEL_RAW_ESTRONE);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_RAW_ESTRONE\);
        cargo_classes: bitmask(CC_POWDERIZED);
        penalty_lowerbound: 32;
        single_penalty_length: 140;
        price_factor: 160;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_raw_testosterone) {
    property {
        number: 27;
        type_name: string(STR_CARGO_PLURAL_RAW_TESTOSTERONE);
        unit_name: string(STR_CARGO_SINGULAR_RAW_TESTOSTERONE);
        type_abbreviation: string(STR_CARGO_ABBREV_RAW_TESTOSTERONE);
        cargo_label: string(STR_CARGO_LABEL_RAW_TESTOSTERONE);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_RAW_TESTOSTERONE\);
        cargo_classes: bitmask(CC_POWDERIZED);
        penalty_lowerbound: 32;
        single_penalty_length: 140;
        price_factor: 160;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_estrogen) {
    property {
        number: 28;
        type_name: string(STR_CARGO_PLURAL_ESTROGEN);
        unit_name: string(STR_CARGO_SINGULAR_ESTROGEN);
        type_abbreviation: string(STR_CARGO_ABBREV_ESTROGEN);
        cargo_label: string(STR_CARGO_LABEL_ESTROGEN);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_ESTROGEN\);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 12;
        single_penalty_length: 32;
        price_factor: 193;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

item (FEAT_CARGOS, item_testosterone) {
    property {
        number: 29;
        type_name: string(STR_CARGO_PLURAL_TESTOSTERONE);
        unit_name: string(STR_CARGO_SINGULAR_TESTOSTERONE);
        type_abbreviation: string(STR_CARGO_ABBREV_TESTOSTERONE);
        cargo_label: string(STR_CARGO_LABEL_TESTOSTERONE);
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_TESTOSTERONE);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 13;
        single_penalty_length: 32;
        price_factor: 193;
        weight: "1.0";
        is_freight: "1.0";
        capacity_multiplier: 1;
        sprite: 4311;
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;

    }
}

// ----------------------------------------------------------------
// Tiles
// ----------------------------------------------------------------

spritelayout spritelayout_placeholder {
    ground: {
        sprite: GROUNDSPRITE_NORMAL;
    }
    building: {
        sprite: 4698;
    }
}

item(FEAT_INDUSTRYTILES, tile_placeholder) {
    property {
        substitute: 0;
        special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
    }
    graphics {
        default: spritelayout_placeholder;
    }
}

tilelayout layout_default {
    0,0: tile_placeholder;
}

// spritelayout spritelayout_port_coast {
//     ground: {
//         sprite:GROUNDSPRITE_NORMAL;
//     }
//     building: {
//         sprite:XXXX;
//     }
// }

// spritelayout spritelayout_port_water {
//     ground: {
//         sprite:GROUNDSPRITE_WATER;
//     }
//     building: {
//         sprite:XXXX;
//     }
// }

// item(FEAT_INDUSTRYTILES, tile_port_coast) {
//     property {
//         substitute: 0;
//         land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
//         special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
//     }
//     graphics {
//         default: spritelayout_port_coast;
//     }
// }

// item(FEAT_INDUSTRYTILES, tile_port_water) {
//     property {
//         substitute: 0;
//         land_shape_flags: bitmask(LSF_ALLOW_ON_WATER);
//         special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
//     }
//     graphics {
//         default: spritelayout_port_water;
//     }
// }

// tilelayout layout_port_north {
//     rotation: DIRECTION_NORTH;
//     0,0: tile_port_coast;
// }

// ----------------------------------------------------------------
// Industry Addressing Reference
// ----------------------------------------------------------------
// PERM_000         :Production cycle index                                         [0..26]
// PERM_001..028    :Input Cargo 0 delivered last 27 cycles (+1 sum @ PERM_028)
// PERM_029..056    :Input Cargo 1 delivered last 27 cycles (+1 sum @ PERM_056)
// PERM_057..084    :Input Cargo 2 delivered last 27 cycles (+1 sum @ PERM_084)

// ----------------------------------------------------------------
// Industry Scripts
// ----------------------------------------------------------------

switch(FEAT_INDUSTRIES, SELF, initialize_industry_registers_helper, [
    STORE_PERM(0, LOAD_TEMP(0)),
    STORE_TEMP(LOAD_TEMP(0)+1, 0),
    LOAD_TEMP(0)
]) {
    255: return;
    initialize_industry_registers_helper;
}

switch(FEAT_INDUSTRIES, SELF, initialize_industry_registers, [
    STORE_TEMP(0, 0)
]) {
    initialize_industry_registers_helper;
}

// TEMP_000         :Input cargo number
switch(FEAT_INDUSTRIES, SELF, production_cycle_tick_closer, [
    STORE_PERM(0, LOAD_TEMP(127)-28+LOAD_PERM(0)+1)   // Store 0 in this production cycle index's register
]) {
    return;
}

// TEMP_000         :Input cargo number         [0,1,2]
// TEMP_001         :Index offset of register to shift  [0..26]
switch(FEAT_INDUSTRIES, SELF, production_cycle_tick_cargo, [
    // Add current offset register to total for this input cargo
    STORE_PERM(LOAD_PERM(LOAD_TEMP(127))+LOAD_PERM(LOAD_TEMP(127)-28+LOAD_TEMP(1)+1), LOAD_TEMP(127)),
    STORE_TEMP(LOAD_TEMP(1)+1, 1),              // Increment index offset
    LOAD_TEMP(1)                                // Make decision based off of index offset
]) {
    27: return production_cycle_tick_closer;           // If index offset is 27, we're finished
    production_cycle_tick_cargo;                // Otherwise, recurse
}

// TEMP_000         :Input cargo number
// TEMP_001         :Index offset of register to shift
// TEMP_127         :Index of register containing total
switch(FEAT_INDUSTRIES, SELF, production_cycle_tick_helper, [
    STORE_PERM((LOAD_PERM(0)+1)%27, 0),         // Load production cycle index, increment, and mod 27
    STORE_TEMP(28*(1+LOAD_TEMP(0)), 127),       // Store index of sum register
    STORE_PERM(0, LOAD_TEMP(127)),              // Reset total
    STORE_TEMP(0, 1)                            // Store 0 in offset
]) {
    production_cycle_tick_cargo                 // Kick off recursive summation
}

// TEMP_000         :Input cargo number         [0,1,2]
switch(FEAT_INDUSTRIES, SELF, production_cycle_tick, [
    STORE_TEMP(0, 0),                           // Do input cargo 0
    production_cycle_tick_helper,
    STORE_TEMP(1, 0),                           // Do input cargo 1
    production_cycle_tick_helper,
    STORE_TEMP(2, 0),                           // Do input cargo 2
    production_cycle_tick_helper
]) {
    return;
}

// TEMP_000         :Input cargo number:        [0,1,2]
// TEMP_001         :Quantity of input cargo    n
// TEMP_127         :Index                      
switch(FEAT_INDUSTRIES, SELF, increment_accepted_cargo, [
    LOAD_TEMP(1+28*LOAD_TEMP(0)+LOAD_PERM(0), 127),                     // Get register representing production cycle
    STORE_PERM(LOAD_PERM(LOAD_TEMP(127))+LOAD_TEMP(1), LOAD_TEMP(127))  // Increment by quantity of input cargo
]) {
    return;
}

// Return amount of total cargo consumed
switch(FEAT_INDUSTRIES, SELF, do_cargo_accept_cycle, [
    STORE_TEMP(0, 5),
    STORE_TEMP(0, 0),
    STORE_TEMP(LOAD_TEMP(2), 1),
    STORE_TEMP(LOAD_TEMP(5) + increment_accepted_cargo, 5),
    STORE_TEMP(1, 0),
    STORE_TEMP(LOAD_TEMP(3), 1),
    STORE_TEMP(LOAD_TEMP(5) + increment_accepted_cargo, 5),
    STORE_TEMP(2, 0),
    STORE_TEMP(LOAD_TEMP(4), 1),
    STORE_TEMP(LOAD_TEMP(5) + increment_accepted_cargo, 5),
    LOAD_TEMP(5)
]) {
    return LOAD_TEMP(5);
}

switch(FEAT_INDUSTRIES, SELF, engineering_supplies_multipler, LOAD_PERM(28)) {
    0..19: return 1;
    20..79: return 2;
    return 4;
}

switch(FEAT_INDUSTRIES, SELF, fertilizer_multiplier, LOAD_PERM(28)) {
    0..13: return 1;
    14..59: return 2;
    return 4;
}

switch(FEAT_INDUSTRIES, SELF, check_positive, LOAD_TEMP(127)) {
    0: return 0;
    return 1;
}

switch(FEAT_INDUSTRIES, SELF, double_combo_multiplier, [
    STORE_TEMP(0, 7),
    STORE_TEMP(28, 127),
    STORE_TEMP(LOAD_TEMP(7)+check_positive, 7),
    STORE_TEMP(56, 127),
    STORE_TEMP(LOAD_TEMP(7)+check_positive, 7),
    LOAD_TEMP(7)
]) {
    2: return 2;
    return 1;
}

switch(FEAT_INDUSTRIES, SELF, triple_combo_multiplier, [
    STORE_TEMP(0, 7),
    STORE_TEMP(28, 127),
    STORE_TEMP(LOAD_TEMP(7)+check_positive, 7),
    STORE_TEMP(56, 127),
    STORE_TEMP(LOAD_TEMP(7)+check_positive, 7),
    STORE_TEMP(84, 127),
    STORE_TEMP(LOAD_TEMP(7)+check_positive, 7),
    LOAD_TEMP(7)
]) {
    3: return 3;
    2: return 2;
    return 1;
}

switch(FEAT_INDUSTRIES, SELF, extra_text_industry_engineering, [
    STORE_TEMP(LOAD_PERM(28), 256),     // Load the crates supplied in the string register
    engineering_supplies_multipler
]) {
    4: return STR_INDUSTRY_LEVEL_STATE_GUNG_HO;
    2: return STR_INDUSTRY_LEVEL_STATE_ENHANCED;
    STR_INDUSTRY_LEVEL_STATE_NORMAL_ENGS;
}

switch(FEAT_INDUSTRIES, SELF, extra_text_industry_fertilizer, [
    STORE_TEMP(LOAD_PERM(28), 256),     // Load the crates supplied in the string register
    fertilizer_multipler
]) {
    4: return STR_INDUSTRY_LEVEL_STATE_GUNG_HO;
    2: return STR_INDUSTRY_LEVEL_STATE_ENHANCED;
    STR_INDUSTRY_LEVEL_STATE_NORMAL_FERT;
}

switch(FEAT_INDUSTRIES, SELF, extra_text_industry_double, [
    double_combo_multiplier
]) {
    2: return STR_INDUSTRY_RATIO_STATE_ENHANCED_DOUBLE;
    STR_INDUSTRY_RATIO_STATE_NORMAL_DOUBLE;
}

switch(FEAT_INDUSTRIES, SELF, extra_text_industry_triple, [
    triple_combo_multiplier
]) {
    3: return STR_INDUSTRY_RATIO_STATE_GUNG_HO;
    2: return STR_INDUSTRY_RATIO_STATE_ENHANCED_TRIPLE;
    STR_INDUSTRY_RATIO_STATE_NORMAL_TRIPLE;
}

// ----------------------------------------------------------------
// Industry Definitions
// ----------------------------------------------------------------

produce(produce_regular_port, 
    [],
    [ENGS:12;SALT:8;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_port, production_cycle_tick) {
    produce_regular_port;
}

item (FEAT_INDUSTRIES, industry_port) {
    property {
        substitute: 0x25;
        name: string(STR_INDUSTRY_NAME_PORT);
        nearby_station_name: string(STR_INDUSTRY_STATION_PORT);
        life_type: IND_LIFE_TYPE_EXTRACTIVE;
        cargo_types: [
            produce_cargo("ENGS", 0),
            produce_cargo("SALT", 0)
        ];
        spec_flags: [IND_FLAG_BUILT_ON_WATER];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_PORT);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PORT);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PORT);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PORT);
        prob_in_game: 2;
        prob_map_gen: 4;
        fund_cost_multiplier: 150;
        prospect_chance: 0.75;
        map_colour: 146;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_port;
    }
}

produce(produce_accept_quarry,
    [ENGS: LOAD_TEMP(2);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_quarry, [
    STORE_TEMP(incoming_cargo_waiting("ENGS"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle, 5)
]) {
    produce_accept_quarry;
}

produce(produce_regular_quarry, 
    [],
    [SAND: 12*engineering_supplies_multiplier; PTSH: 8*engineering_supplies_multiplier;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_quarry, production_cycle_tick) {
    produce_regular_quarry;
}

item (FEAT_INDUSTRIES, industry_quarry) {
    property {
        substitute: 0x26;
        name: string(STR_INDUSTRY_NAME_QUARRY);
        nearby_station_name: string(STR_INDUSTRY_STATION_QUARRY);
        life_type: IND_LIFE_TYPE_EXTRACTIVE;
        cargo_types: [
            accept_cargo("ENGS"),
            produce_cargo("SAND", 0),
            produce_cargo("PTSH", 0)
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_QUARRY);
        closure_msg: string(STR_INDUSTRY_CLOSURE_QUARRY);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_QUARRY);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_QUARRY);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 200;
        prospect_chance: 0.75;
        map_colour: 33;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_quarry;
        produce_cargo_arrival: produce_cargo_arrival_quarry;
        extra_text_industry: extra_text_industry_engineering;
    }
}

produce(produce_accept_mineral_mine,
    [ENGS: LOAD_TEMP(2);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_mineral_mine, [
    STORE_TEMP(incoming_cargo_waiting("ENGS"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle, 5),
]) {
    produce_accept_mineral_mine;
}

produce(produce_regular_mineral_mine, 
    [], 
    [MNRL: 16*engineering_supplies_multiplier;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_mineral_mine, production_cycle_tick) {
    produce_regular_mineral_mine;
}

item (FEAT_INDUSTRIES, industry_mineral_mine) {
    property {
        substitute: 0x27;
        name: string(STR_INDUSTRY_NAME_MINERAL_MINE);
        nearby_station_name: string(STR_INDUSTRY_STATION_MINERAL_MINE);
        life_type: IND_LIFE_TYPE_EXTRACTIVE;
        cargo_types: [
            accept_cargo("ENGS"),
            produce_cargo("MNRL", 0),
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_MINERAL_MINE);
        closure_msg: string(STR_INDUSTRY_CLOSURE_MINERAL_MINE);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_MINERAL_MINE);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_MINERAL_MINE);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 200;
        prospect_chance: 0.75;
        map_colour: 41;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_mineral_mine;
        produce_cargo_arrival: produce_cargo_arrival_mineral_mine;
        extra_text_industry: extra_text_industry_engineering;
    }
}

produce(produce_accept_corn_farm,
    [FERT: LOAD_TEMP(2);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_corn_farm, [
    STORE_TEMP(incoming_cargo_waiting("FERT"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle, 5),
    STORE_TEMP(fertilizer_multiplier, 6)
]) {
    produce_accept_corn_farm;
}

produce(produce_regular_corn_farm, 
    [], 
    [CORN: 16 * fertilizer_multiplier;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_corn_farm, production_cycle_tick) {
    produce_regular_corn_farm;
}

item (FEAT_INDUSTRIES, industry_corn_farm) {
    property {
        substitute: 0x28;
        name: string(STR_INDUSTRY_NAME_CORN_FARM);
        nearby_station_name: string(STR_INDUSTRY_STATION_CORN_FARM);
        life_type: IND_LIFE_TYPE_ORGANIC;
        cargo_types: [
            accept_cargo("FERT"),
            produce_cargo("CORN", 0),
        ];
        spec_flags: [IND_FLAG_PLANT_FIELDS_PERIODICALLY, IND_FLAG_PLANT_FIELDS_WHEN_BUILT];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_CORN_FARM);
        closure_msg: string(STR_INDUSTRY_CLOSURE_CORN_FARM);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_CORN_FARM);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_CORN_FARM);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 50;
        prospect_chance: 0.75;
        map_colour: 66;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_corn_farm;
        produce_cargo_arrival: produce_cargo_arrival_corn_farm;
        extra_text_industry: extra_text_industry_fertilizer;
    }
}

produce(produce_accept_soy_farm,
    [FERT: LOAD_TEMP(2);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_soy_farm, [
    STORE_TEMP(incoming_cargo_waiting("FERT"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle, 5),
    STORE_TEMP(fertilizer_multiplier, 6)
]) {
    produce_accept_soy_farm;
}

produce(produce_regular_soy_farm, 
    [], 
    [SOYB: 12 * fertilizer_multiplier;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_soy_farm, production_cycle_tick) {
    produce_regular_soy_farm;
}

item (FEAT_INDUSTRIES, industry_soy_farm) {
    property {
        substitute: 0x29;
        name: string(STR_INDUSTRY_NAME_SOY_FARM);
        nearby_station_name: string(STR_INDUSTRY_STATION_SOY_FARM);
        life_type: IND_LIFE_TYPE_ORGANIC;
        cargo_types: [
            accept_cargo("FERT"),
            produce_cargo("SOYB", 0),
        ];
        spec_flags: [IND_FLAG_PLANT_FIELDS_PERIODICALLY, IND_FLAG_PLANT_FIELDS_WHEN_BUILT];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_SOY_FARM);
        closure_msg: string(STR_INDUSTRY_CLOSURE_SOY_FARM);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_SOY_FARM);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_SOY_FARM);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 50;
        prospect_chance: 0.75;
        map_colour: 71;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_soy_farm;
        produce_cargo_arrival: produce_cargo_arrival_soy_farm;
        extra_text_industry: extra_text_industry_fertilizer;
    }
}

produce(produce_accept_yam_farm,
    [FERT: LOAD_TEMP(2);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_yam_farm, [
    STORE_TEMP(incoming_cargo_waiting("FERT"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle, 5),
    STORE_TEMP(fertilizer_multiplier, 6)
]) {
    produce_accept_yam_farm;
}

produce(produce_regular_yam_farm, 
    [], 
    [YAM: 12 * fertilizer_multiplier;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_yam_farm, production_cycle_tick) {
    produce_regular_yam_farm;
}

item (FEAT_INDUSTRIES, industry_yam_farm) {
    property {
        substitute: 0x2A;
        name: string(STR_INDUSTRY_NAME_YAM_FARM);
        nearby_station_name: string(STR_INDUSTRY_STATION_YAM_FARM);
        life_type: IND_LIFE_TYPE_ORGANIC;
        cargo_types: [
            accept_cargo("FERT"),
            produce_cargo("YAM", 0),
        ];
        spec_flags: [IND_FLAG_PLANT_FIELDS_PERIODICALLY, IND_FLAG_PLANT_FIELDS_WHEN_BUILT];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_YAM_FARM);
        closure_msg: string(STR_INDUSTRY_CLOSURE_YAM_FARM);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_YAM_FARM);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_YAM_FARM);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 50;
        prospect_chance: 0.75;
        map_colour: 75;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_yam_farm;
        produce_cargo_arrival: produce_cargo_arrival_yam_farm;
        extra_text_industry: extra_text_industry_fertilizer;
    }
}

produce(produce_accept_glassworks,
    [SAND: LOAD_TEMP(2);],
    [VIAL: LOAD_TEMP(5) * LOAD_TEMP(6) * 0.33; GOOD: LOAD_TEMP(5) * LOAD_TEMP(6) * 0.33;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_glassworks, [
    STORE_TEMP(incoming_cargo_waiting("SAND"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle, 5),
    STORE_TEMP(1, 6)
]) {
    produce_accept_glassworks;
}

produce(produce_regular_glassworks, 
    [], 
    [VIAL:6;GOOD:4;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_glassworks, production_cycle_tick) {
    produce_regular_glassworks;
}

item (FEAT_INDUSTRIES, industry_glassworks) {
    property {
        substitute: 0x2B;
        name: string(STR_INDUSTRY_NAME_GLASSWORKS);
        nearby_station_name: string(STR_INDUSTRY_STATION_GLASSWORKS);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("SAND"),
            produce_cargo("VIAL", 0),
            produce_cargo("GOOD", 0)
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_GLASSWORKS);
        closure_msg: string(STR_INDUSTRY_CLOSURE_GLASSWORKS);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_GLASSWORKS);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_GLASSWORKS);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 135;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_glassworks;
        produce_cargo_arrival: produce_cargo_arrival_glassworks;
    }
}

produce(produce_accept_chemical_plant,
    [SALT: LOAD_TEMP(2); PTSH: LOAD_TEMP(3); MNRL: LOAD_TEMP(4);],
    [FERT: LOAD_TEMP(5) * LOAD_TEMP(6) * 0.25; CHEM: LOAD_TEMP(5) * LOAD_TEMP(6) * 0.25;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_chemical_plant, [
    STORE_TEMP(incoming_cargo_waiting("SALT"), 2),
    STORE_TEMP(incoming_cargo_waiting("PTSH"), 3),
    STORE_TEMP(incoming_cargo_waiting("MNRL"), 4),
    STORE_TEMP(do_cargo_accept_cycle, 5),
    STORE_TEMP(triple_combo_multiplier, 6)
]) {
    produce_accept_chemical_plant;
}

produce(produce_regular_chemical_plant, 
    [], 
    [FERT: 6 * triple_combo_multiplier; CHEM: 4 * triple_combo_multiplier;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_chemical_plant, production_cycle_tick) {
    produce_regular_chemical_plant;
}

item (FEAT_INDUSTRIES, industry_chemical_plant) {
    property {
        substitute: 0x2C;
        name: string(STR_INDUSTRY_NAME_CHEMICAL_PLANT);
        nearby_station_name: string(STR_INDUSTRY_STATION_CHEMICAL_PLANT);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("SALT"),
            accept_cargo("PTSH"),
            accept_cargo("MNRL"),
            produce_cargo("FERT", 0),
            produce_cargo("CHEM", 0)
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_CHEMICAL_PLANT);
        closure_msg: string(STR_INDUSTRY_CLOSURE_CHEMICAL_PLANT);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_CHEMICAL_PLANT);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_CHEMICAL_PLANT);
        prob_in_game: 6;
        prob_map_gen: 9;
        fund_cost_multiplier: 100;
        map_colour: 185;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_chemical_plant;
        produce_cargo_arrival: produce_cargo_arrival_chemical_plant;
        extra_text_industry: extra_text_industry_triple;
    }
}

produce(produce_accept_biolab,
    [CORN: LOAD_TEMP(2);],
    [VGOL: LOAD_TEMP(5) * LOAD_TEMP(6) * 0.5;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_biolab, [
    STORE_TEMP(incoming_cargo_waiting("CORN"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle, 5),
    STORE_TEMP(1, 6)
]) {
    produce_accept_biolab;
}

produce(produce_regular_biolab, 
    [], 
    [VGOL:6;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_biolab, production_cycle_tick) {
    produce_regular_biolab;
}

item (FEAT_INDUSTRIES, industry_biolab) {
    property {
        substitute: 0x2D;
        name: string(STR_INDUSTRY_NAME_BIOLAB);
        nearby_station_name: string(STR_INDUSTRY_STATION_BIOLAB);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("CORN"),
            produce_cargo("VGOL", 0),
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_BIOLAB);
        closure_msg: string(STR_INDUSTRY_CLOSURE_BIOLAB);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_BIOLAB);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_BIOLAB);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 206;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_biolab;
        produce_cargo_arrival: produce_cargo_arrival_biolab;
    }
}

produce(produce_accept_distillery,
    [CORN: LOAD_TEMP(2);],
    [ALCH: LOAD_TEMP(5) * LOAD_TEMP(6) * 0.5;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_distillery, [
    STORE_TEMP(incoming_cargo_waiting("CORN"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle, 5),
    STORE_TEMP(1, 6)
]) {
    produce_accept_distillery;
}

produce(produce_regular_distillery, 
    [], 
    [ALCH:6;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_distillery, production_cycle_tick) {
    produce_regular_distillery;
}

item (FEAT_INDUSTRIES, industry_distillery) {
    property {
        substitute: 0x2E;
        name: string(STR_INDUSTRY_NAME_DISTILLERY);
        nearby_station_name: string(STR_INDUSTRY_STATION_DISTILLERY);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("CORN"),
            produce_cargo("ALCH", 0),
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_DISTILLERY);
        closure_msg: string(STR_INDUSTRY_CLOSURE_DISTILLERY);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_DISTILLERY);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_DISTILLERY);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 192;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_distillery;
        produce_cargo_arrival: produce_cargo_arrival_distillery;
    }
}

produce(produce_accept_processing_plant,
    [SOYB: LOAD_TEMP(2); YAMS: LOAD_TEMP(3); ALCH: LOAD_TEMP(4);],
    [DIOS: LOAD_TEMP(5) * LOAD_TEMP(6) * 0.5;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_processing_plant, [
    STORE_TEMP(incoming_cargo_waiting("SOYB"), 2),
    STORE_TEMP(incoming_cargo_waiting("YAMS"), 3),
    STORE_TEMP(incoming_cargo_waiting("ALCH"), 4),
    STORE_TEMP(do_cargo_accept_cycle, 5),
    STORE_TEMP(triple_combo_multiplier, 6)
]) {
    produce_accept_processing_plant;
}

produce(produce_regular_processing_plant, 
    [], 
    [DIOS: 6;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_processing_plant, production_cycle_tick) {
    produce_regular_processing_plant;
}

item (FEAT_INDUSTRIES, industry_processing_plant) {
    property {
        substitute: 0x2F;
        name: string(STR_INDUSTRY_NAME_PROCESSING_PLANT);
        nearby_station_name: string(STR_INDUSTRY_STATION_PROCESSING_PLANT);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("SOYB"),
            accept_cargo("YAMS"),
            accept_cargo("ALCH"),
            produce_cargo("DIOS", 0),
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_PROCESSING_PLANT);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PROCESSING_PLANT);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PROCESSING_PLANT);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PROCESSING_PLANT);
        prob_in_game: 6;
        prob_map_gen: 9;
        fund_cost_multiplier: 100;
        map_colour: 174;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_processing_plant;
        produce_cargo_arrival: produce_cargo_arrival_processing_plant;
        extra_text_industry: extra_text_industry_triple;
    }
}

produce(produce_accept_pharmaceutical_plant_e,
    [DIOS: LOAD_TEMP(2); CHEM: LOAD_TEMP(3);],
    [RWES: LOAD_TEMP(5) * LOAD_TEMP(6) * 0.5;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_pharmaceutical_plant_e, [
    STORE_TEMP(incoming_cargo_waiting("DIOS"), 2),
    STORE_TEMP(incoming_cargo_waiting("CHEM"), 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle, 5),
    STORE_TEMP(double_combo_multiplier, 6)
]) {
    produce_accept_pharmaceutical_plant_e;
}

produce(produce_regular_pharmaceutical_plant_e, 
    [], 
    [RWES: 6;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_pharmaceutical_plant_e, production_cycle_tick) {
    produce_regular_pharmaceutical_plant_e;
}

item (FEAT_INDUSTRIES, industry_pharmaceutical_plant_e) {
    property {
        substitute: 0x30;
        name: string(STR_INDUSTRY_NAME_PHARMACEUTICAL_PLANT_E);
        nearby_station_name: string(STR_INDUSTRY_STATION_PHARMACEUTICAL_PLANT_E);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("DIOS"),
            accept_cargo("CHEM"),
            produce_cargo("RWES", 0),
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_PHARMACEUTICAL_PLANT_E);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PHARMACEUTICAL_PLANT_E);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PHARMACEUTICAL_PLANT_E);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PHARMACEUTICAL_PLANT_E);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 152;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_pharmaceutical_plant_e;
        produce_cargo_arrival: produce_cargo_arrival_pharmaceutical_plant_e;
        construction_probability: availability_in_estrogen;
        extra_text_industry: extra_text_industry_double;
    }
}

produce(produce_accept_pharmaceutical_plant_t,
    [DIOS: LOAD_TEMP(2); CHEM: LOAD_TEMP(3);],
    [RWTS: LOAD_TEMP(5) * LOAD_TEMP(6) * 0.5;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_pharmaceutical_plant_t, [
    STORE_TEMP(incoming_cargo_waiting("DIOS"), 2),
    STORE_TEMP(incoming_cargo_waiting("CHEM"), 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle, 5),
    STORE_TEMP(double_combo_multiplier, 6)
]) {
    produce_accept_pharmaceutical_plant_t;
}

produce(produce_regular_pharmaceutical_plant_t, 
    [], 
    [RWTS: 6*double_combo_multiplier;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_pharmaceutical_plant_t, production_cycle_tick) {
    produce_regular_pharmaceutical_plant_t;
}

item (FEAT_INDUSTRIES, industry_pharmaceutical_plant_t) {
    property {
        substitute: 0x31;
        name: string(STR_INDUSTRY_NAME_PHARMACEUTICAL_PLANT_T);
        nearby_station_name: string(STR_INDUSTRY_STATION_PHARMACEUTICAL_PLANT_T);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("DIOS"),
            accept_cargo("CHEM"),
            produce_cargo("RWTS", 0),
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_PHARMACEUTICAL_PLANT_T);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PHARMACEUTICAL_PLANT_T);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PHARMACEUTICAL_PLANT_T);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PHARMACEUTICAL_PLANT_T);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 103;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_pharmaceutical_plant_t;
        produce_cargo_arrival: produce_cargo_arrival_pharmaceutical_plant_t;
        construction_probability: availability_in_testosterone;
        extra_text_industry: extra_text_industry_double;
    }
}

produce(produce_accept_pharmacy_e,
    [VIAL: LOAD_TEMP(2); VGOL: LOAD_TEMP(3); RWES: LOAD_TEMP(4);],
    [ESTR: LOAD_TEMP(5) * LOAD_TEMP(6) * 0.5;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_pharmacy_e, [
    STORE_TEMP(incoming_cargo_waiting("VIAL"), 2),
    STORE_TEMP(incoming_cargo_waiting("VGOL"), 3),
    STORE_TEMP(incoming_cargo_waiting("RWES"), 4),
    STORE_TEMP(do_cargo_accept_cycle, 5),
    STORE_TEMP(triple_combo_multiplier, 6)
]) {
    produce_accept_pharmacy_e;
}

produce(produce_regular_pharmacy_e, 
    [], 
    [ESTR: 6*triple_combo_multiplier;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_pharmacy_e, production_cycle_tick) {
    produce_regular_pharmacy_e;
}

item (FEAT_INDUSTRIES, industry_pharmacy_e) {
    property {
        substitute: 0x32;
        name: string(STR_INDUSTRY_NAME_PHARMACY_E);
        nearby_station_name: string(STR_INDUSTRY_STATION_PHARMACY_E);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("VIAL"),
            accept_cargo("VGOL"),
            accept_cargo("RWES"),
            produce_cargo("ESTR")
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_PHARMACY_E);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PHARMACY_E);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PHARMACY_E);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PHARMACY_E);
        prob_in_game: 6;
        prob_map_gen: 9;
        fund_cost_multiplier: 100;
        map_colour: 150;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_pharmacy_e;
        produce_cargo_arrival: produce_cargo_arrival_pharmacy_e;
        construction_probability: availability_in_estrogen;
        extra_text_industry: extra_text_industry_triple;
    }
}


produce(produce_accept_pharamacy_t,
    [VIAL: LOAD_TEMP(2); VGOL: LOAD_TEMP(3); RWTS: LOAD_TEMP(4);],
    [TEST: LOAD_TEMP(5) * LOAD_TEMP(6) * 0.5;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_pharamacy_t, [
    STORE_TEMP(incoming_cargo_waiting("VIAL"), 2),
    STORE_TEMP(incoming_cargo_waiting("VGOL"), 3),
    STORE_TEMP(incoming_cargo_waiting("RWTS"), 4),
    STORE_TEMP(do_cargo_accept_cycle, 5),
    STORE_TEMP(triple_combo_multiplier, 6)
]) {
    produce_accept_pharamacy_t;
}

produce(produce_regular_pharamacy_t, 
    [], 
    [TEST: 6*triple_combo_multiplier;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_pharamacy_t, production_cycle_tick) {
    produce_regular_pharamacy_t;
}

item (FEAT_INDUSTRIES, industry_pharamacy_t) {
    property {
        substitute: 0x33;
        name: string(STR_INDUSTRY_NAME_PHARMACY_T);
        nearby_station_name: string(STR_INDUSTRY_STATION_PHARMACY_T);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("VIAL"),
            accept_cargo("VGOL"),
            accept_cargo("RWTS"),
            produce_cargo("TEST")
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_PHARMACY_T);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PHARMACY_T);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PHARMACY_T);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PHARMACY_T);
        prob_in_game: 6;
        prob_map_gen: 9;
        fund_cost_multiplier: 100;
        map_colour: 101;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_pharamacy_t;
        produce_cargo_arrival: produce_cargo_arrival_pharamacy_t;
        construction_probability: availability_in_testosterone;
        extra_text_industry: extra_text_industry_triple;
    }
}

produce(produce_accept_gender_clinic_e,
    [ESTR: incoming_cargo_waiting("ESTR");],
    []
)

item (FEAT_INDUSTRIES, industry_gender_clinic_e) {
    property {
        substitute: 0x34;
        name: string(STR_INDUSTRY_NAME_GENDER_CLINIC_E);
        nearby_station_name: string(STR_INDUSTRY_STATION_GENDER_CLINIC_E);
        life_type: IND_LIFE_TYPE_BLACK_HOLE;
        cargo_types: [
            accept_cargo("ESTR"),
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_GENDER_CLINIC_E);
        closure_msg: string(STR_INDUSTRY_CLOSURE_GENDER_CLINIC_E);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 25;
        map_colour: 49;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_cargo_arrival: produce_accept_gender_clinic_e;
        construction_probability: availability_in_estrogen;
    }
}


produce(produce_accept_gender_clinic_t,
    [TEST: incoming_cargo_waiting("TEST");],
    []
)

item (FEAT_INDUSTRIES, industry_gender_clinic_t) {
    property {
        substitute: 0x35;
        name: string(STR_INDUSTRY_NAME_GENDER_CLINIC_T);
        nearby_station_name: string(STR_INDUSTRY_STATION_GENDER_CLINIC_T);
        life_type: IND_LIFE_TYPE_BLACK_HOLE;
        cargo_types: [
            accept_cargo("TEST"),
        ];
        spec_flags: [];
        new_ind_msg: string(STR_INDUSTRY_PLANTED_GENDER_CLINIC_T);
        closure_msg: string(STR_INDUSTRY_CLOSURE_GENDER_CLINIC_T);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 25;
        map_colour: 48;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_cargo_arrival: produce_accept_gender_clinic_t;
        construction_probability: availability_in_testosterone;
    }
}