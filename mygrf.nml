grf {
    grfid: "AK01";
    name: string(STR_GRF_NAME);
    desc: string(STR_GRF_DESCRIPTION);
    version: 0;
    min_compatible_version: 0;
    param 0 {
        hormone {
            type: int;
            name: string(STR_PARAM_NAME_HORMONE);
            desc: string(STR_PARAM_DESC_HORMONE);
            min_value: 0;
            max_value: 2;
            def_value: 0;
            names: {
                0: string(STR_PARAM_VALUE_HORMONE_ESTROGEN);
                1: string(STR_PARAM_VALUE_HORMONE_TESTOSTERONE);
                2: string(STR_PARAM_VALUE_HORMONE_BOTH);
            };
        }
    }
}

// Listen. Yes, this is all in one file. That's just how openttd NML works, for some reason.
// Yes, I could build a basic templating program to do actual compartmentalization,
// But I'm lazy and this mod is supposed to be a meme, so one giant .nml file it is.

// ----------------------------------------------------------------
// Conventions
// ----------------------------------------------------------------

// BOOST_CARGO_FIRST    :Cargos that boost production should be listed first in all indexes.

// ----------------------------------------------------------------
// Settings
// ----------------------------------------------------------------

cargotable {
    PASS, GOOD, ENGS, FERT, SALT, PTSH, SAND, MNRL, CORN, SOYB, YAMS, VIAL, CHEM, VGOL, ALCH, DIOS, RWES, RWTS, ESTR, TEST
}

disable_item(FEAT_CARGOS, 1);
disable_item(FEAT_CARGOS, 3, 4);
disable_item(FEAT_CARGOS, 6, 11);
disable_item(FEAT_INDUSTRIES, 0, 36);
disable_item(FEAT_TRAINS, 27, 31);
disable_item(FEAT_TRAINS, 33, 53);
disable_item(FEAT_TRAINS, 59, 61);
disable_item(FEAT_TRAINS, 63, 83);
disable_item(FEAT_TRAINS, 89, 93);
disable_item(FEAT_TRAINS, 95, 115);
disable_item(FEAT_ROADVEHS, 7, 9);
disable_item(FEAT_ROADVEHS, 16, 21);
disable_item(FEAT_ROADVEHS, 25, 87);

// switch(FEAT_INDUSTRIES, SELF, availability_default, 0) {
//     CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
// }

switch (FEAT_INDUSTRIES, SELF, availability_in_estrogen, hormone) {
    0: return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
    1: return CB_RESULT_IND_NO_CONSTRUCTION;
    2: return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
    CB_RESULT_IND_NO_CONSTRUCTION;
}

switch (FEAT_INDUSTRIES, SELF, availability_in_testosterone, hormone) {
    0: return CB_RESULT_IND_NO_CONSTRUCTION;
    1: return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
    2: return CB_RESULT_IND_PROBABILITY_FROM_PROPERTY;
    CB_RESULT_IND_NO_CONSTRUCTION;
}

// ----------------------------------------------------------------
// Cargo Definitions
// ----------------------------------------------------------------

item (FEAT_CARGOS, item_engineering_supplies) {
    property {
        number: 12;
        type_name: string(STR_CARGO_PLURAL_ENGINEERING_SUPPLIES);
        unit_name: string(STR_CARGO_SINGULAR_ENGINEERING_SUPPLIES);
        type_abbreviation: string(STR_CARGO_ABBREV_ENGINEERING_SUPPLIES);
        cargo_label: "ENGS";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_ENGINEERING_SUPPLIES);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 20;
        single_penalty_length: 40;
        price_factor: 110;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_fertilizer) {
    property {
        number: 13;
        type_name: string(STR_CARGO_PLURAL_FERTILIZER);
        unit_name: string(STR_CARGO_SINGULAR_FERTILIZER);
        type_abbreviation: string(STR_CARGO_ABBREV_FERTILIZER);
        cargo_label: "FERT";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_FERTILIZER);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 20;
        single_penalty_length: 40;
        price_factor: 151;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_salt) {
    property {
        number: 14;
        type_name: string(STR_CARGO_PLURAL_SALT);
        unit_name: string(STR_CARGO_SINGULAR_SALT);
        type_abbreviation: string(STR_CARGO_ABBREV_SALT);
        cargo_label: "SALT";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_SALT);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 100;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_potash) {
    property {
        number: 15;
        type_name: string(STR_CARGO_PLURAL_POTASH);
        unit_name: string(STR_CARGO_SINGULAR_POTASH);
        type_abbreviation: string(STR_CARGO_ABBREV_POTASH);
        cargo_label: "PTSH";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_POTASH);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 100;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_sand) {
    property {
        number: 16;
        type_name: string(STR_CARGO_PLURAL_SAND);
        unit_name: string(STR_CARGO_SINGULAR_SAND);
        type_abbreviation: string(STR_CARGO_ABBREV_SAND);
        cargo_label: "SAND";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_SAND);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 40;
        single_penalty_length: 255;
        price_factor: 100;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_minerals) {
    property {
        number: 17;
        type_name: string(STR_CARGO_PLURAL_MINERALS);
        unit_name: string(STR_CARGO_SINGULAR_MINERALS);
        type_abbreviation: string(STR_CARGO_ABBREV_MINERALS);
        cargo_label: "MNRL";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_MINERALS);
        cargo_classes: bitmask(CC_BULK);
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 100;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_corn) {
    property {
        number: 18;
        type_name: string(STR_CARGO_PLURAL_CORN);
        unit_name: string(STR_CARGO_SINGULAR_CORN);
        type_abbreviation: string(STR_CARGO_ABBREV_CORN);
        cargo_label: "CORN";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_CORN);
        cargo_classes: bitmask(CC_COVERED, CC_BULK);
        penalty_lowerbound: 12;
        single_penalty_length: 40;
        price_factor: 90;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_soy) {
    property {
        number: 19;
        type_name: string(STR_CARGO_PLURAL_SOY);
        unit_name: string(STR_CARGO_SINGULAR_SOY);
        type_abbreviation: string(STR_CARGO_ABBREV_SOY);
        cargo_label: "SOYB";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_SOY);
        cargo_classes: bitmask(CC_COVERED, CC_BULK);
        penalty_lowerbound: 8;
        single_penalty_length: 24;
        price_factor: 117;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_yam) {
    property {
        number: 20;
        type_name: string(STR_CARGO_PLURAL_YAM);
        unit_name: string(STR_CARGO_SINGULAR_YAM);
        type_abbreviation: string(STR_CARGO_ABBREV_YAM);
        cargo_label: "YAMS";
        units_of_cargo: string(TTD_STR_TONS);
        items_of_cargo: string(STR_CARGO_UNIT_YAM);
        cargo_classes: bitmask(CC_COVERED, CC_BULK);
        penalty_lowerbound: 8;
        single_penalty_length: 24;
        price_factor: 117;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_vials) {
    property {
        number: 21;
        type_name: string(STR_CARGO_PLURAL_VIALS);
        unit_name: string(STR_CARGO_SINGULAR_VIALS);
        type_abbreviation: string(STR_CARGO_ABBREV_VIALS);
        cargo_label: "VIAL";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_VIALS);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 16;
        single_penalty_length: 160;
        price_factor: 110;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_chemicals) {
    property {
        number: 22;
        type_name: string(STR_CARGO_PLURAL_CHEMICALS);
        unit_name: string(STR_CARGO_SINGULAR_CHEMICALS);
        type_abbreviation: string(STR_CARGO_ABBREV_CHEMICALS);
        cargo_label: "CHEM";
        units_of_cargo: string(TTD_STR_LITERS);
        items_of_cargo: string(STR_CARGO_UNIT_CHEMICALS);
        cargo_classes: bitmask(CC_LIQUID, CC_HAZARDOUS);
        penalty_lowerbound: 24;
        single_penalty_length: 48;
        price_factor: 148;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_vegetable_oil) {
    property {
        number: 23;
        type_name: string(STR_CARGO_PLURAL_VEGETABLE_OIL);
        unit_name: string(STR_CARGO_SINGULAR_VEGETABLE_OIL);
        type_abbreviation: string(STR_CARGO_ABBREV_VEGETABLE_OIL);
        cargo_label: "VGOL";
        units_of_cargo: string(TTD_STR_LITERS);
        items_of_cargo: string(STR_CARGO_UNIT_VEGETABLE_OIL);
        cargo_classes: bitmask(CC_LIQUID);
        penalty_lowerbound: 8;
        single_penalty_length: 36;
        price_factor: 124;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_alcohol) {
    property {
        number: 24;
        type_name: string(STR_CARGO_PLURAL_ALCOHOL);
        unit_name: string(STR_CARGO_SINGULAR_ALCOHOL);
        type_abbreviation: string(STR_CARGO_ABBREV_ALCOHOL);
        cargo_label: "ALCH";
        units_of_cargo: string(TTD_STR_LITERS);
        items_of_cargo: string(STR_CARGO_UNIT_ALCOHOL);
        cargo_classes: bitmask(CC_LIQUID);
        penalty_lowerbound: 12;
        single_penalty_length: 40;
        price_factor: 122;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_diosgenin) {
    property {
        number: 25;
        type_name: string(STR_CARGO_PLURAL_DIOSGENIN);
        unit_name: string(STR_CARGO_SINGULAR_DIOSGENIN);
        type_abbreviation: string(STR_CARGO_ABBREV_DIOSGENIN);
        cargo_label: "DIOS";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_DIOSGENIN);
        cargo_classes: bitmask(CC_POWDERIZED);
        penalty_lowerbound: 32;
        single_penalty_length: 40;
        price_factor: 170;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_raw_estrone) {
    property {
        number: 26;
        type_name: string(STR_CARGO_PLURAL_RAW_ESTRONE);
        unit_name: string(STR_CARGO_SINGULAR_RAW_ESTRONE);
        type_abbreviation: string(STR_CARGO_ABBREV_RAW_ESTRONE);
        cargo_label: "RWES";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_RAW_ESTRONE);
        cargo_classes: bitmask(CC_POWDERIZED);
        penalty_lowerbound: 32;
        single_penalty_length: 140;
        price_factor: 160;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_raw_testosterone) {
    property {
        number: 27;
        type_name: string(STR_CARGO_PLURAL_RAW_TESTOSTERONE);
        unit_name: string(STR_CARGO_SINGULAR_RAW_TESTOSTERONE);
        type_abbreviation: string(STR_CARGO_ABBREV_RAW_TESTOSTERONE);
        cargo_label: "RWTS";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_RAW_TESTOSTERONE);
        cargo_classes: bitmask(CC_POWDERIZED);
        penalty_lowerbound: 32;
        single_penalty_length: 140;
        price_factor: 160;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_estrogen) {
    property {
        number: 28;
        type_name: string(STR_CARGO_PLURAL_ESTROGEN);
        unit_name: string(STR_CARGO_SINGULAR_ESTROGEN);
        type_abbreviation: string(STR_CARGO_ABBREV_ESTROGEN);
        cargo_label: "ESTR";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_ESTROGEN);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 12;
        single_penalty_length: 32;
        price_factor: 193;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
    
}

item (FEAT_CARGOS, item_testosterone) {
    property {
        number: 29;
        type_name: string(STR_CARGO_PLURAL_TESTOSTERONE);
        unit_name: string(STR_CARGO_SINGULAR_TESTOSTERONE);
        type_abbreviation: string(STR_CARGO_ABBREV_TESTOSTERONE);
        cargo_label: "TEST";
        units_of_cargo: string(TTD_STR_CRATES);
        items_of_cargo: string(STR_CARGO_UNIT_TESTOSTERONE);
        cargo_classes: bitmask(CC_PIECE_GOODS);
        penalty_lowerbound: 13;
        single_penalty_length: 32;
        price_factor: 193;
        weight: 1.0;
        is_freight: 1.0;
        capacity_multiplier: 1;
        sprite: 4311;
    }
}

// ----------------------------------------------------------------
// Tiles
// ----------------------------------------------------------------

spritelayout spritelayout_placeholder {
    ground {
        sprite: GROUNDSPRITE_NORMAL;
    }
    building {
        sprite: 4698;
    }
}

item(FEAT_INDUSTRYTILES, tile_placeholder) {
    property {
        substitute: 0;
        special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
    }
    graphics {
        default: spritelayout_placeholder;
    }
}

tilelayout layout_default {
    0,0: tile_placeholder;
}

// spritelayout spritelayout_port_coast {
//     ground {
//         sprite:GROUNDSPRITE_NORMAL;
//     }
//     building {
//         sprite:XXXX;
//     }
// }

// spritelayout spritelayout_port_water {
//     ground {
//         sprite:GROUNDSPRITE_WATER;
//     }
//     building {
//         sprite:XXXX;
//     }
// }

// item(FEAT_INDUSTRYTILES, tile_port_coast) {
//     property {
//         substitute: 0;
//         land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
//         special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
//     }
//     graphics {
//         default: spritelayout_port_coast;
//     }
// }

// item(FEAT_INDUSTRYTILES, tile_port_water) {
//     property {
//         substitute: 0;
//         land_shape_flags: bitmask(LSF_ALLOW_ON_WATER);
//         special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
//     }
//     graphics {
//         default: spritelayout_port_water;
//     }
// }

// tilelayout layout_port_north {
//     rotation: DIRECTION_NORTH;
//     0,0: tile_port_coast;
// }

// ----------------------------------------------------------------
// Industry Addressing Reference
// ----------------------------------------------------------------
// PERM_000         :Production cycle index                                         [0..26]
// PERM_001..028    :Input Cargo 0 delivered last 27 cycles (+1 sum @ PERM_028)
// PERM_029..056    :Input Cargo 1 delivered last 27 cycles (+1 sum @ PERM_056)
// PERM_057..084    :Input Cargo 2 delivered last 27 cycles (+1 sum @ PERM_084)

// ----------------------------------------------------------------
// Industry Scripts
// ----------------------------------------------------------------

switch(FEAT_INDUSTRIES, SELF, initialize_industry_registers_helper, [
    STORE_PERM(0, LOAD_TEMP(0)),
    STORE_TEMP(LOAD_TEMP(0)+1, 0),
    LOAD_TEMP(0)
]) {
    255: return 0;
    1;
}

produce(recurse_initialize_industry_registers_helper,
        [],
        [],
        initialize_industry_registers_helper())

switch(FEAT_INDUSTRIES, SELF, initialize_industry_registers, [
    STORE_TEMP(0, 0)
]) {
    recurse_initialize_industry_registers_helper;
}

// TEMP_000         :Input cargo number
switch(FEAT_INDUSTRIES, SELF, production_cycle_tick_closer, [
    STORE_PERM(0, LOAD_TEMP(127)-28+LOAD_PERM(0)+1)   // Store 0 in this production cycle index's register
]) {
    return 0;
}

// TEMP_000         :Input cargo number         [0,1,2]
// TEMP_001         :Index offset of register to shift  [0..26]
switch(FEAT_INDUSTRIES, SELF, production_cycle_tick_cargo, [
    // Add current offset register to total for this input cargo
    STORE_PERM(LOAD_PERM(LOAD_TEMP(127))+LOAD_PERM(LOAD_TEMP(127)-28+LOAD_TEMP(1)+1), LOAD_TEMP(127)),
    STORE_TEMP(LOAD_TEMP(1)+1, 1),              // Increment index offset
    LOAD_TEMP(1)                                // Make decision based off of index offset
]) {
    27: production_cycle_tick_closer;           // If index offset is 27, we're finished
    1;                // Otherwise, recurse
}

produce(recurse_production_cycle_tick_cargo,
        [],
        [],
        production_cycle_tick_cargo())

// TEMP_000         :Input cargo number
// TEMP_001         :Index offset of register to shift
// TEMP_127         :Index of register containing total
switch(FEAT_INDUSTRIES, SELF, production_cycle_tick_helper, [
    STORE_PERM((LOAD_PERM(0)+1)%27, 0),         // Load production cycle index, increment, and mod 27
    STORE_TEMP(28*(1+LOAD_TEMP(0)), 127),       // Store index of sum register
    STORE_PERM(0, LOAD_TEMP(127)),              // Reset total
    STORE_TEMP(0, 1)                            // Store 0 in offset
]) {
    recurse_production_cycle_tick_cargo;                 // Kick off recursive summation
}

// TEMP_000         :Input cargo number         [0,1,2]
switch(FEAT_INDUSTRIES, SELF, production_cycle_tick, [
    STORE_TEMP(0, 0),                           // Do input cargo 0
    production_cycle_tick_helper(),
    STORE_TEMP(1, 0),                           // Do input cargo 1
    production_cycle_tick_helper(),
    STORE_TEMP(2, 0),                           // Do input cargo 2
    production_cycle_tick_helper()
]) {
    return;
}

switch(FEAT_INDUSTRIES, SELF, store_perm_variable, [
    LOAD_TEMP(127)
]) {
    0: STORE_PERM(LOAD_TEMP(126), 0);
    1: STORE_PERM(LOAD_TEMP(126), 1);
    2: STORE_PERM(LOAD_TEMP(126), 2);
    3: STORE_PERM(LOAD_TEMP(126), 3);
    4: STORE_PERM(LOAD_TEMP(126), 4);
    5: STORE_PERM(LOAD_TEMP(126), 5);
    6: STORE_PERM(LOAD_TEMP(126), 6);
    7: STORE_PERM(LOAD_TEMP(126), 7);
    8: STORE_PERM(LOAD_TEMP(126), 8);
    9: STORE_PERM(LOAD_TEMP(126), 9);
    10: STORE_PERM(LOAD_TEMP(126), 10);
    11: STORE_PERM(LOAD_TEMP(126), 11);
    12: STORE_PERM(LOAD_TEMP(126), 12);
    13: STORE_PERM(LOAD_TEMP(126), 13);
    14: STORE_PERM(LOAD_TEMP(126), 14);
    15: STORE_PERM(LOAD_TEMP(126), 15);
    16: STORE_PERM(LOAD_TEMP(126), 16);
    17: STORE_PERM(LOAD_TEMP(126), 17);
    18: STORE_PERM(LOAD_TEMP(126), 18);
    19: STORE_PERM(LOAD_TEMP(126), 19);
    20: STORE_PERM(LOAD_TEMP(126), 20);
    21: STORE_PERM(LOAD_TEMP(126), 21);
    22: STORE_PERM(LOAD_TEMP(126), 22);
    23: STORE_PERM(LOAD_TEMP(126), 23);
    24: STORE_PERM(LOAD_TEMP(126), 24);
    25: STORE_PERM(LOAD_TEMP(126), 25);
    26: STORE_PERM(LOAD_TEMP(126), 26);
    27: STORE_PERM(LOAD_TEMP(126), 27);
    28: STORE_PERM(LOAD_TEMP(126), 28);
    29: STORE_PERM(LOAD_TEMP(126), 29);
    30: STORE_PERM(LOAD_TEMP(126), 30);
    31: STORE_PERM(LOAD_TEMP(126), 31);
    32: STORE_PERM(LOAD_TEMP(126), 32);
    33: STORE_PERM(LOAD_TEMP(126), 33);
    34: STORE_PERM(LOAD_TEMP(126), 34);
    35: STORE_PERM(LOAD_TEMP(126), 35);
    36: STORE_PERM(LOAD_TEMP(126), 36);
    37: STORE_PERM(LOAD_TEMP(126), 37);
    38: STORE_PERM(LOAD_TEMP(126), 38);
    39: STORE_PERM(LOAD_TEMP(126), 39);
    40: STORE_PERM(LOAD_TEMP(126), 40);
    41: STORE_PERM(LOAD_TEMP(126), 41);
    42: STORE_PERM(LOAD_TEMP(126), 42);
    43: STORE_PERM(LOAD_TEMP(126), 43);
    44: STORE_PERM(LOAD_TEMP(126), 44);
    45: STORE_PERM(LOAD_TEMP(126), 45);
    46: STORE_PERM(LOAD_TEMP(126), 46);
    47: STORE_PERM(LOAD_TEMP(126), 47);
    48: STORE_PERM(LOAD_TEMP(126), 48);
    49: STORE_PERM(LOAD_TEMP(126), 49);
    50: STORE_PERM(LOAD_TEMP(126), 50);
    51: STORE_PERM(LOAD_TEMP(126), 51);
    52: STORE_PERM(LOAD_TEMP(126), 52);
    53: STORE_PERM(LOAD_TEMP(126), 53);
    54: STORE_PERM(LOAD_TEMP(126), 54);
    55: STORE_PERM(LOAD_TEMP(126), 55);
    56: STORE_PERM(LOAD_TEMP(126), 56);
    57: STORE_PERM(LOAD_TEMP(126), 57);
    58: STORE_PERM(LOAD_TEMP(126), 58);
    59: STORE_PERM(LOAD_TEMP(126), 59);
    60: STORE_PERM(LOAD_TEMP(126), 60);
    61: STORE_PERM(LOAD_TEMP(126), 61);
    62: STORE_PERM(LOAD_TEMP(126), 62);
    63: STORE_PERM(LOAD_TEMP(126), 63);
    64: STORE_PERM(LOAD_TEMP(126), 64);
    65: STORE_PERM(LOAD_TEMP(126), 65);
    66: STORE_PERM(LOAD_TEMP(126), 66);
    67: STORE_PERM(LOAD_TEMP(126), 67);
    68: STORE_PERM(LOAD_TEMP(126), 68);
    69: STORE_PERM(LOAD_TEMP(126), 69);
    70: STORE_PERM(LOAD_TEMP(126), 70);
    71: STORE_PERM(LOAD_TEMP(126), 71);
    72: STORE_PERM(LOAD_TEMP(126), 72);
    73: STORE_PERM(LOAD_TEMP(126), 73);
    74: STORE_PERM(LOAD_TEMP(126), 74);
    75: STORE_PERM(LOAD_TEMP(126), 75);
    76: STORE_PERM(LOAD_TEMP(126), 76);
    77: STORE_PERM(LOAD_TEMP(126), 77);
    78: STORE_PERM(LOAD_TEMP(126), 78);
    79: STORE_PERM(LOAD_TEMP(126), 79);
    80: STORE_PERM(LOAD_TEMP(126), 80);
    81: STORE_PERM(LOAD_TEMP(126), 81);
    82: STORE_PERM(LOAD_TEMP(126), 82);
    83: STORE_PERM(LOAD_TEMP(126), 83);
    84: STORE_PERM(LOAD_TEMP(126), 84);
    85: STORE_PERM(LOAD_TEMP(126), 85);
    86: STORE_PERM(LOAD_TEMP(126), 86);
    87: STORE_PERM(LOAD_TEMP(126), 87);
    88: STORE_PERM(LOAD_TEMP(126), 88);
    89: STORE_PERM(LOAD_TEMP(126), 89);
    90: STORE_PERM(LOAD_TEMP(126), 90);
    91: STORE_PERM(LOAD_TEMP(126), 91);
    92: STORE_PERM(LOAD_TEMP(126), 92);
    93: STORE_PERM(LOAD_TEMP(126), 93);
    94: STORE_PERM(LOAD_TEMP(126), 94);
    95: STORE_PERM(LOAD_TEMP(126), 95);
    96: STORE_PERM(LOAD_TEMP(126), 96);
    97: STORE_PERM(LOAD_TEMP(126), 97);
    98: STORE_PERM(LOAD_TEMP(126), 98);
    99: STORE_PERM(LOAD_TEMP(126), 99);
    100: STORE_PERM(LOAD_TEMP(126), 100);
    101: STORE_PERM(LOAD_TEMP(126), 101);
    102: STORE_PERM(LOAD_TEMP(126), 102);
    103: STORE_PERM(LOAD_TEMP(126), 103);
    104: STORE_PERM(LOAD_TEMP(126), 104);
    105: STORE_PERM(LOAD_TEMP(126), 105);
    106: STORE_PERM(LOAD_TEMP(126), 106);
    107: STORE_PERM(LOAD_TEMP(126), 107);
    108: STORE_PERM(LOAD_TEMP(126), 108);
    109: STORE_PERM(LOAD_TEMP(126), 109);
    110: STORE_PERM(LOAD_TEMP(126), 110);
    111: STORE_PERM(LOAD_TEMP(126), 111);
    112: STORE_PERM(LOAD_TEMP(126), 112);
    113: STORE_PERM(LOAD_TEMP(126), 113);
    114: STORE_PERM(LOAD_TEMP(126), 114);
    115: STORE_PERM(LOAD_TEMP(126), 115);
    116: STORE_PERM(LOAD_TEMP(126), 116);
    117: STORE_PERM(LOAD_TEMP(126), 117);
    118: STORE_PERM(LOAD_TEMP(126), 118);
    119: STORE_PERM(LOAD_TEMP(126), 119);
    120: STORE_PERM(LOAD_TEMP(126), 120);
    121: STORE_PERM(LOAD_TEMP(126), 121);
    122: STORE_PERM(LOAD_TEMP(126), 122);
    123: STORE_PERM(LOAD_TEMP(126), 123);
    124: STORE_PERM(LOAD_TEMP(126), 124);
    125: STORE_PERM(LOAD_TEMP(126), 125);
    126: STORE_PERM(LOAD_TEMP(126), 126);
    127: STORE_PERM(LOAD_TEMP(126), 127);
    128: STORE_PERM(LOAD_TEMP(126), 128);
    129: STORE_PERM(LOAD_TEMP(126), 129);
    130: STORE_PERM(LOAD_TEMP(126), 130);
    131: STORE_PERM(LOAD_TEMP(126), 131);
    132: STORE_PERM(LOAD_TEMP(126), 132);
    133: STORE_PERM(LOAD_TEMP(126), 133);
    134: STORE_PERM(LOAD_TEMP(126), 134);
    135: STORE_PERM(LOAD_TEMP(126), 135);
    136: STORE_PERM(LOAD_TEMP(126), 136);
    137: STORE_PERM(LOAD_TEMP(126), 137);
    138: STORE_PERM(LOAD_TEMP(126), 138);
    139: STORE_PERM(LOAD_TEMP(126), 139);
    140: STORE_PERM(LOAD_TEMP(126), 140);
    141: STORE_PERM(LOAD_TEMP(126), 141);
    142: STORE_PERM(LOAD_TEMP(126), 142);
    143: STORE_PERM(LOAD_TEMP(126), 143);
    144: STORE_PERM(LOAD_TEMP(126), 144);
    145: STORE_PERM(LOAD_TEMP(126), 145);
    146: STORE_PERM(LOAD_TEMP(126), 146);
    147: STORE_PERM(LOAD_TEMP(126), 147);
    148: STORE_PERM(LOAD_TEMP(126), 148);
    149: STORE_PERM(LOAD_TEMP(126), 149);
    150: STORE_PERM(LOAD_TEMP(126), 150);
    151: STORE_PERM(LOAD_TEMP(126), 151);
    152: STORE_PERM(LOAD_TEMP(126), 152);
    153: STORE_PERM(LOAD_TEMP(126), 153);
    154: STORE_PERM(LOAD_TEMP(126), 154);
    155: STORE_PERM(LOAD_TEMP(126), 155);
    156: STORE_PERM(LOAD_TEMP(126), 156);
    157: STORE_PERM(LOAD_TEMP(126), 157);
    158: STORE_PERM(LOAD_TEMP(126), 158);
    159: STORE_PERM(LOAD_TEMP(126), 159);
    160: STORE_PERM(LOAD_TEMP(126), 160);
    161: STORE_PERM(LOAD_TEMP(126), 161);
    162: STORE_PERM(LOAD_TEMP(126), 162);
    163: STORE_PERM(LOAD_TEMP(126), 163);
    164: STORE_PERM(LOAD_TEMP(126), 164);
    165: STORE_PERM(LOAD_TEMP(126), 165);
    166: STORE_PERM(LOAD_TEMP(126), 166);
    167: STORE_PERM(LOAD_TEMP(126), 167);
    168: STORE_PERM(LOAD_TEMP(126), 168);
    169: STORE_PERM(LOAD_TEMP(126), 169);
    170: STORE_PERM(LOAD_TEMP(126), 170);
    171: STORE_PERM(LOAD_TEMP(126), 171);
    172: STORE_PERM(LOAD_TEMP(126), 172);
    173: STORE_PERM(LOAD_TEMP(126), 173);
    174: STORE_PERM(LOAD_TEMP(126), 174);
    175: STORE_PERM(LOAD_TEMP(126), 175);
    176: STORE_PERM(LOAD_TEMP(126), 176);
    177: STORE_PERM(LOAD_TEMP(126), 177);
    178: STORE_PERM(LOAD_TEMP(126), 178);
    179: STORE_PERM(LOAD_TEMP(126), 179);
    180: STORE_PERM(LOAD_TEMP(126), 180);
    181: STORE_PERM(LOAD_TEMP(126), 181);
    182: STORE_PERM(LOAD_TEMP(126), 182);
    183: STORE_PERM(LOAD_TEMP(126), 183);
    184: STORE_PERM(LOAD_TEMP(126), 184);
    185: STORE_PERM(LOAD_TEMP(126), 185);
    186: STORE_PERM(LOAD_TEMP(126), 186);
    187: STORE_PERM(LOAD_TEMP(126), 187);
    188: STORE_PERM(LOAD_TEMP(126), 188);
    189: STORE_PERM(LOAD_TEMP(126), 189);
    190: STORE_PERM(LOAD_TEMP(126), 190);
    191: STORE_PERM(LOAD_TEMP(126), 191);
    192: STORE_PERM(LOAD_TEMP(126), 192);
    193: STORE_PERM(LOAD_TEMP(126), 193);
    194: STORE_PERM(LOAD_TEMP(126), 194);
    195: STORE_PERM(LOAD_TEMP(126), 195);
    196: STORE_PERM(LOAD_TEMP(126), 196);
    197: STORE_PERM(LOAD_TEMP(126), 197);
    198: STORE_PERM(LOAD_TEMP(126), 198);
    199: STORE_PERM(LOAD_TEMP(126), 199);
    200: STORE_PERM(LOAD_TEMP(126), 200);
    201: STORE_PERM(LOAD_TEMP(126), 201);
    202: STORE_PERM(LOAD_TEMP(126), 202);
    203: STORE_PERM(LOAD_TEMP(126), 203);
    204: STORE_PERM(LOAD_TEMP(126), 204);
    205: STORE_PERM(LOAD_TEMP(126), 205);
    206: STORE_PERM(LOAD_TEMP(126), 206);
    207: STORE_PERM(LOAD_TEMP(126), 207);
    208: STORE_PERM(LOAD_TEMP(126), 208);
    209: STORE_PERM(LOAD_TEMP(126), 209);
    210: STORE_PERM(LOAD_TEMP(126), 210);
    211: STORE_PERM(LOAD_TEMP(126), 211);
    212: STORE_PERM(LOAD_TEMP(126), 212);
    213: STORE_PERM(LOAD_TEMP(126), 213);
    214: STORE_PERM(LOAD_TEMP(126), 214);
    215: STORE_PERM(LOAD_TEMP(126), 215);
    216: STORE_PERM(LOAD_TEMP(126), 216);
    217: STORE_PERM(LOAD_TEMP(126), 217);
    218: STORE_PERM(LOAD_TEMP(126), 218);
    219: STORE_PERM(LOAD_TEMP(126), 219);
    220: STORE_PERM(LOAD_TEMP(126), 220);
    221: STORE_PERM(LOAD_TEMP(126), 221);
    222: STORE_PERM(LOAD_TEMP(126), 222);
    223: STORE_PERM(LOAD_TEMP(126), 223);
    224: STORE_PERM(LOAD_TEMP(126), 224);
    225: STORE_PERM(LOAD_TEMP(126), 225);
    226: STORE_PERM(LOAD_TEMP(126), 226);
    227: STORE_PERM(LOAD_TEMP(126), 227);
    228: STORE_PERM(LOAD_TEMP(126), 228);
    229: STORE_PERM(LOAD_TEMP(126), 229);
    230: STORE_PERM(LOAD_TEMP(126), 230);
    231: STORE_PERM(LOAD_TEMP(126), 231);
    232: STORE_PERM(LOAD_TEMP(126), 232);
    233: STORE_PERM(LOAD_TEMP(126), 233);
    234: STORE_PERM(LOAD_TEMP(126), 234);
    235: STORE_PERM(LOAD_TEMP(126), 235);
    236: STORE_PERM(LOAD_TEMP(126), 236);
    237: STORE_PERM(LOAD_TEMP(126), 237);
    238: STORE_PERM(LOAD_TEMP(126), 238);
    239: STORE_PERM(LOAD_TEMP(126), 239);
    240: STORE_PERM(LOAD_TEMP(126), 240);
    241: STORE_PERM(LOAD_TEMP(126), 241);
    242: STORE_PERM(LOAD_TEMP(126), 242);
    243: STORE_PERM(LOAD_TEMP(126), 243);
    244: STORE_PERM(LOAD_TEMP(126), 244);
    245: STORE_PERM(LOAD_TEMP(126), 245);
    246: STORE_PERM(LOAD_TEMP(126), 246);
    247: STORE_PERM(LOAD_TEMP(126), 247);
    248: STORE_PERM(LOAD_TEMP(126), 248);
    249: STORE_PERM(LOAD_TEMP(126), 249);
    250: STORE_PERM(LOAD_TEMP(126), 250);
    251: STORE_PERM(LOAD_TEMP(126), 251);
    252: STORE_PERM(LOAD_TEMP(126), 252);
    253: STORE_PERM(LOAD_TEMP(126), 253);
    254: STORE_PERM(LOAD_TEMP(126), 254);
    255: STORE_PERM(LOAD_TEMP(126), 255);
}

switch(FEAT_INDUSTRIES, SELF, load_perm_variable, [
    LOAD_TEMP(127)
]) {
    0: LOAD_PERM(0);
    1: LOAD_PERM(1);
    2: LOAD_PERM(2);
    3: LOAD_PERM(3);
    4: LOAD_PERM(4);
    5: LOAD_PERM(5);
    6: LOAD_PERM(6);
    7: LOAD_PERM(7);
    8: LOAD_PERM(8);
    9: LOAD_PERM(9);
    10: LOAD_PERM(10);
    11: LOAD_PERM(11);
    12: LOAD_PERM(12);
    13: LOAD_PERM(13);
    14: LOAD_PERM(14);
    15: LOAD_PERM(15);
    16: LOAD_PERM(16);
    17: LOAD_PERM(17);
    18: LOAD_PERM(18);
    19: LOAD_PERM(19);
    20: LOAD_PERM(20);
    21: LOAD_PERM(21);
    22: LOAD_PERM(22);
    23: LOAD_PERM(23);
    24: LOAD_PERM(24);
    25: LOAD_PERM(25);
    26: LOAD_PERM(26);
    27: LOAD_PERM(27);
    28: LOAD_PERM(28);
    29: LOAD_PERM(29);
    30: LOAD_PERM(30);
    31: LOAD_PERM(31);
    32: LOAD_PERM(32);
    33: LOAD_PERM(33);
    34: LOAD_PERM(34);
    35: LOAD_PERM(35);
    36: LOAD_PERM(36);
    37: LOAD_PERM(37);
    38: LOAD_PERM(38);
    39: LOAD_PERM(39);
    40: LOAD_PERM(40);
    41: LOAD_PERM(41);
    42: LOAD_PERM(42);
    43: LOAD_PERM(43);
    44: LOAD_PERM(44);
    45: LOAD_PERM(45);
    46: LOAD_PERM(46);
    47: LOAD_PERM(47);
    48: LOAD_PERM(48);
    49: LOAD_PERM(49);
    50: LOAD_PERM(50);
    51: LOAD_PERM(51);
    52: LOAD_PERM(52);
    53: LOAD_PERM(53);
    54: LOAD_PERM(54);
    55: LOAD_PERM(55);
    56: LOAD_PERM(56);
    57: LOAD_PERM(57);
    58: LOAD_PERM(58);
    59: LOAD_PERM(59);
    60: LOAD_PERM(60);
    61: LOAD_PERM(61);
    62: LOAD_PERM(62);
    63: LOAD_PERM(63);
    64: LOAD_PERM(64);
    65: LOAD_PERM(65);
    66: LOAD_PERM(66);
    67: LOAD_PERM(67);
    68: LOAD_PERM(68);
    69: LOAD_PERM(69);
    70: LOAD_PERM(70);
    71: LOAD_PERM(71);
    72: LOAD_PERM(72);
    73: LOAD_PERM(73);
    74: LOAD_PERM(74);
    75: LOAD_PERM(75);
    76: LOAD_PERM(76);
    77: LOAD_PERM(77);
    78: LOAD_PERM(78);
    79: LOAD_PERM(79);
    80: LOAD_PERM(80);
    81: LOAD_PERM(81);
    82: LOAD_PERM(82);
    83: LOAD_PERM(83);
    84: LOAD_PERM(84);
    85: LOAD_PERM(85);
    86: LOAD_PERM(86);
    87: LOAD_PERM(87);
    88: LOAD_PERM(88);
    89: LOAD_PERM(89);
    90: LOAD_PERM(90);
    91: LOAD_PERM(91);
    92: LOAD_PERM(92);
    93: LOAD_PERM(93);
    94: LOAD_PERM(94);
    95: LOAD_PERM(95);
    96: LOAD_PERM(96);
    97: LOAD_PERM(97);
    98: LOAD_PERM(98);
    99: LOAD_PERM(99);
    100: LOAD_PERM(100);
    101: LOAD_PERM(101);
    102: LOAD_PERM(102);
    103: LOAD_PERM(103);
    104: LOAD_PERM(104);
    105: LOAD_PERM(105);
    106: LOAD_PERM(106);
    107: LOAD_PERM(107);
    108: LOAD_PERM(108);
    109: LOAD_PERM(109);
    110: LOAD_PERM(110);
    111: LOAD_PERM(111);
    112: LOAD_PERM(112);
    113: LOAD_PERM(113);
    114: LOAD_PERM(114);
    115: LOAD_PERM(115);
    116: LOAD_PERM(116);
    117: LOAD_PERM(117);
    118: LOAD_PERM(118);
    119: LOAD_PERM(119);
    120: LOAD_PERM(120);
    121: LOAD_PERM(121);
    122: LOAD_PERM(122);
    123: LOAD_PERM(123);
    124: LOAD_PERM(124);
    125: LOAD_PERM(125);
    126: LOAD_PERM(126);
    127: LOAD_PERM(127);
    128: LOAD_PERM(128);
    129: LOAD_PERM(129);
    130: LOAD_PERM(130);
    131: LOAD_PERM(131);
    132: LOAD_PERM(132);
    133: LOAD_PERM(133);
    134: LOAD_PERM(134);
    135: LOAD_PERM(135);
    136: LOAD_PERM(136);
    137: LOAD_PERM(137);
    138: LOAD_PERM(138);
    139: LOAD_PERM(139);
    140: LOAD_PERM(140);
    141: LOAD_PERM(141);
    142: LOAD_PERM(142);
    143: LOAD_PERM(143);
    144: LOAD_PERM(144);
    145: LOAD_PERM(145);
    146: LOAD_PERM(146);
    147: LOAD_PERM(147);
    148: LOAD_PERM(148);
    149: LOAD_PERM(149);
    150: LOAD_PERM(150);
    151: LOAD_PERM(151);
    152: LOAD_PERM(152);
    153: LOAD_PERM(153);
    154: LOAD_PERM(154);
    155: LOAD_PERM(155);
    156: LOAD_PERM(156);
    157: LOAD_PERM(157);
    158: LOAD_PERM(158);
    159: LOAD_PERM(159);
    160: LOAD_PERM(160);
    161: LOAD_PERM(161);
    162: LOAD_PERM(162);
    163: LOAD_PERM(163);
    164: LOAD_PERM(164);
    165: LOAD_PERM(165);
    166: LOAD_PERM(166);
    167: LOAD_PERM(167);
    168: LOAD_PERM(168);
    169: LOAD_PERM(169);
    170: LOAD_PERM(170);
    171: LOAD_PERM(171);
    172: LOAD_PERM(172);
    173: LOAD_PERM(173);
    174: LOAD_PERM(174);
    175: LOAD_PERM(175);
    176: LOAD_PERM(176);
    177: LOAD_PERM(177);
    178: LOAD_PERM(178);
    179: LOAD_PERM(179);
    180: LOAD_PERM(180);
    181: LOAD_PERM(181);
    182: LOAD_PERM(182);
    183: LOAD_PERM(183);
    184: LOAD_PERM(184);
    185: LOAD_PERM(185);
    186: LOAD_PERM(186);
    187: LOAD_PERM(187);
    188: LOAD_PERM(188);
    189: LOAD_PERM(189);
    190: LOAD_PERM(190);
    191: LOAD_PERM(191);
    192: LOAD_PERM(192);
    193: LOAD_PERM(193);
    194: LOAD_PERM(194);
    195: LOAD_PERM(195);
    196: LOAD_PERM(196);
    197: LOAD_PERM(197);
    198: LOAD_PERM(198);
    199: LOAD_PERM(199);
    200: LOAD_PERM(200);
    201: LOAD_PERM(201);
    202: LOAD_PERM(202);
    203: LOAD_PERM(203);
    204: LOAD_PERM(204);
    205: LOAD_PERM(205);
    206: LOAD_PERM(206);
    207: LOAD_PERM(207);
    208: LOAD_PERM(208);
    209: LOAD_PERM(209);
    210: LOAD_PERM(210);
    211: LOAD_PERM(211);
    212: LOAD_PERM(212);
    213: LOAD_PERM(213);
    214: LOAD_PERM(214);
    215: LOAD_PERM(215);
    216: LOAD_PERM(216);
    217: LOAD_PERM(217);
    218: LOAD_PERM(218);
    219: LOAD_PERM(219);
    220: LOAD_PERM(220);
    221: LOAD_PERM(221);
    222: LOAD_PERM(222);
    223: LOAD_PERM(223);
    224: LOAD_PERM(224);
    225: LOAD_PERM(225);
    226: LOAD_PERM(226);
    227: LOAD_PERM(227);
    228: LOAD_PERM(228);
    229: LOAD_PERM(229);
    230: LOAD_PERM(230);
    231: LOAD_PERM(231);
    232: LOAD_PERM(232);
    233: LOAD_PERM(233);
    234: LOAD_PERM(234);
    235: LOAD_PERM(235);
    236: LOAD_PERM(236);
    237: LOAD_PERM(237);
    238: LOAD_PERM(238);
    239: LOAD_PERM(239);
    240: LOAD_PERM(240);
    241: LOAD_PERM(241);
    242: LOAD_PERM(242);
    243: LOAD_PERM(243);
    244: LOAD_PERM(244);
    245: LOAD_PERM(245);
    246: LOAD_PERM(246);
    247: LOAD_PERM(247);
    248: LOAD_PERM(248);
    249: LOAD_PERM(249);
    250: LOAD_PERM(250);
    251: LOAD_PERM(251);
    252: LOAD_PERM(252);
    253: LOAD_PERM(253);
    254: LOAD_PERM(254);
    255: LOAD_PERM(255);
}

// TEMP_000         :Input cargo number:        [0,1,2]
// TEMP_001         :Quantity of input cargo    n
// TEMP_127         :Index                      
switch(FEAT_INDUSTRIES, SELF, increment_accepted_cargo, [
    STORE_TEMP(1+28*LOAD_TEMP(0)+LOAD_PERM(0), 127),                     // Get register representing production cycle
    STORE_TEMP(load_perm_variable()+LOAD_TEMP(1), 126),
    store_perm_variable()
]) {
    return;
}

// Return amount of total cargo consumed
switch(FEAT_INDUSTRIES, SELF, do_cargo_accept_cycle, [
    STORE_TEMP(0, 5),
    STORE_TEMP(0, 0),
    STORE_TEMP(LOAD_TEMP(2), 1),
    STORE_TEMP(LOAD_TEMP(5) + increment_accepted_cargo(), 5),
    STORE_TEMP(1, 0),
    STORE_TEMP(LOAD_TEMP(3), 1),
    STORE_TEMP(LOAD_TEMP(5) + increment_accepted_cargo(), 5),
    STORE_TEMP(2, 0),
    STORE_TEMP(LOAD_TEMP(4), 1),
    STORE_TEMP(LOAD_TEMP(5) + increment_accepted_cargo(), 5),
    LOAD_TEMP(5)
]) {
    return LOAD_TEMP(5);
}

switch(FEAT_INDUSTRIES, SELF, engineering_supplies_multiplier, LOAD_PERM(28)) {
    0..19: return 1;
    20..79: return 2;
    return 4;
}

switch(FEAT_INDUSTRIES, SELF, fertilizer_multiplier, LOAD_PERM(28)) {
    0..13: return 1;
    14..59: return 2;
    return 4;
}

switch(FEAT_INDUSTRIES, SELF, check_positive, LOAD_TEMP(127)) {
    0: return 0;
    return 1;
}

switch(FEAT_INDUSTRIES, SELF, double_combo_multiplier, [
    STORE_TEMP(0, 7),
    STORE_TEMP(28, 127),
    STORE_TEMP(LOAD_TEMP(7)+check_positive(), 7),
    STORE_TEMP(56, 127),
    STORE_TEMP(LOAD_TEMP(7)+check_positive(), 7),
    LOAD_TEMP(7)
]) {
    2: return 2;
    return 1;
}

switch(FEAT_INDUSTRIES, SELF, triple_combo_multiplier, [
    STORE_TEMP(0, 7),
    STORE_TEMP(28, 127),
    STORE_TEMP(LOAD_TEMP(7)+check_positive(), 7),
    STORE_TEMP(56, 127),
    STORE_TEMP(LOAD_TEMP(7)+check_positive(), 7),
    STORE_TEMP(84, 127),
    STORE_TEMP(LOAD_TEMP(7)+check_positive(), 7),
    LOAD_TEMP(7)
]) {
    3: return 3;
    2: return 2;
    return 1;
}

switch(FEAT_INDUSTRIES, SELF, extra_text_industry_engineering, [
    STORE_TEMP(LOAD_PERM(28), 256),     // Load the crates supplied in the string register
    engineering_supplies_multiplier()
]) {
    4: return string(STR_INDUSTRY_LEVEL_STATE_GUNG_HO);
    2: return string(STR_INDUSTRY_LEVEL_STATE_ENHANCED);
    string(STR_INDUSTRY_LEVEL_STATE_NORMAL_ENGS);
}

switch(FEAT_INDUSTRIES, SELF, extra_text_industry_fertilizer, [
    STORE_TEMP(LOAD_PERM(28), 256),     // Load the crates supplied in the string register
    fertilizer_multiplier()
]) {
    4: return string(STR_INDUSTRY_LEVEL_STATE_GUNG_HO);
    2: return string(STR_INDUSTRY_LEVEL_STATE_ENHANCED);
    string(STR_INDUSTRY_LEVEL_STATE_NORMAL_FERT);
}

switch(FEAT_INDUSTRIES, SELF, extra_text_industry_double, [
    double_combo_multiplier()
]) {
    2: return string(STR_INDUSTRY_RATIO_STATE_ENHANCED_DOUBLE);
    string(STR_INDUSTRY_RATIO_STATE_NORMAL_DOUBLE);
}

switch(FEAT_INDUSTRIES, SELF, extra_text_industry_triple, [
    triple_combo_multiplier()
]) {
    3: return string(STR_INDUSTRY_RATIO_STATE_GUNG_HO);
    2: return string(STR_INDUSTRY_RATIO_STATE_ENHANCED_TRIPLE);
    string(STR_INDUSTRY_RATIO_STATE_NORMAL_TRIPLE);
}

// ----------------------------------------------------------------
// Industry Definitions
// ----------------------------------------------------------------

produce(produce_regular_port, 
    [],
    [ENGS:12;SALT:8;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_port, production_cycle_tick()) {
    produce_regular_port;
}

item (FEAT_INDUSTRIES, industry_port) {
    property {
        substitute: 0x25;
        name: string(STR_INDUSTRY_NAME_PORT);
        nearby_station_name: string(STR_INDUSTRY_STATION_PORT);
        life_type: IND_LIFE_TYPE_EXTRACTIVE;
        cargo_types: [
            produce_cargo("ENGS", 0),
            produce_cargo("SALT", 0)
        ];
        spec_flags: bitmask(IND_FLAG_BUILT_ON_WATER);
        new_ind_msg: string(STR_INDUSTRY_PLANTED_PORT);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PORT);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PORT);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PORT);
        prob_in_game: 2;
        prob_map_gen: 4;
        fund_cost_multiplier: 150;
        prospect_chance: 0.75;
        map_colour: 146;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_port;
    }
}

produce(produce_accept_quarry,
    [ENGS: LOAD_TEMP(2);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_quarry, [
    STORE_TEMP(incoming_cargo_waiting("ENGS"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5)
]) {
    produce_accept_quarry;
}

produce(produce_regular_quarry, 
    [],
    [SAND: 12*engineering_supplies_multiplier(); PTSH: 8*engineering_supplies_multiplier();],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_quarry, production_cycle_tick()) {
    produce_regular_quarry;
}

item (FEAT_INDUSTRIES, industry_quarry) {
    property {
        substitute: 0x26;
        name: string(STR_INDUSTRY_NAME_QUARRY);
        nearby_station_name: string(STR_INDUSTRY_STATION_QUARRY);
        life_type: IND_LIFE_TYPE_EXTRACTIVE;
        cargo_types: [
            accept_cargo("ENGS"),
            produce_cargo("SAND", 0),
            produce_cargo("PTSH", 0)
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_QUARRY);
        closure_msg: string(STR_INDUSTRY_CLOSURE_QUARRY);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_QUARRY);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_QUARRY);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 200;
        prospect_chance: 0.75;
        map_colour: 33;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_quarry;
        produce_cargo_arrival: produce_cargo_arrival_quarry;
        extra_text_industry: extra_text_industry_engineering;
    }
}

produce(produce_accept_mineral_mine,
    [ENGS: LOAD_TEMP(2);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_mineral_mine, [
    STORE_TEMP(incoming_cargo_waiting("ENGS"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5),
]) {
    produce_accept_mineral_mine;
}

produce(produce_regular_mineral_mine, 
    [], 
    [MNRL: 16*engineering_supplies_multiplier();],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_mineral_mine, production_cycle_tick()) {
    produce_regular_mineral_mine;
}

item (FEAT_INDUSTRIES, industry_mineral_mine) {
    property {
        substitute: 0x27;
        name: string(STR_INDUSTRY_NAME_MINERAL_MINE);
        nearby_station_name: string(STR_INDUSTRY_STATION_MINERAL_MINE);
        life_type: IND_LIFE_TYPE_EXTRACTIVE;
        cargo_types: [
            accept_cargo("ENGS"),
            produce_cargo("MNRL", 0),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_MINERAL_MINE);
        closure_msg: string(STR_INDUSTRY_CLOSURE_MINERAL_MINE);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_MINERAL_MINE);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_MINERAL_MINE);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 200;
        prospect_chance: 0.75;
        map_colour: 41;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_mineral_mine;
        produce_cargo_arrival: produce_cargo_arrival_mineral_mine;
        extra_text_industry: extra_text_industry_engineering;
    }
}

produce(produce_accept_corn_farm,
    [FERT: LOAD_TEMP(2);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_corn_farm, [
    STORE_TEMP(incoming_cargo_waiting("FERT"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5),
    STORE_TEMP(fertilizer_multiplier(), 6)
]) {
    produce_accept_corn_farm;
}

produce(produce_regular_corn_farm, 
    [], 
    [CORN: 16 * fertilizer_multiplier();],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_corn_farm, production_cycle_tick()) {
    produce_regular_corn_farm;
}

item (FEAT_INDUSTRIES, industry_corn_farm) {
    property {
        substitute: 0x28;
        name: string(STR_INDUSTRY_NAME_CORN_FARM);
        nearby_station_name: string(STR_INDUSTRY_STATION_CORN_FARM);
        life_type: IND_LIFE_TYPE_ORGANIC;
        cargo_types: [
            accept_cargo("FERT"),
            produce_cargo("CORN", 0),
        ];
        spec_flags: bitmask(IND_FLAG_PLANT_FIELDS_PERIODICALLY, IND_FLAG_PLANT_FIELDS_WHEN_BUILT);
        new_ind_msg: string(STR_INDUSTRY_PLANTED_CORN_FARM);
        closure_msg: string(STR_INDUSTRY_CLOSURE_CORN_FARM);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_CORN_FARM);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_CORN_FARM);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 50;
        prospect_chance: 0.75;
        map_colour: 66;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_corn_farm;
        produce_cargo_arrival: produce_cargo_arrival_corn_farm;
        extra_text_industry: extra_text_industry_fertilizer;
    }
}

produce(produce_accept_soy_farm,
    [FERT: LOAD_TEMP(2);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_soy_farm, [
    STORE_TEMP(incoming_cargo_waiting("FERT"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5),
    STORE_TEMP(fertilizer_multiplier(), 6)
]) {
    produce_accept_soy_farm;
}

produce(produce_regular_soy_farm, 
    [], 
    [SOYB: 12 * fertilizer_multiplier();],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_soy_farm, production_cycle_tick()) {
    produce_regular_soy_farm;
}

item (FEAT_INDUSTRIES, industry_soy_farm) {
    property {
        substitute: 0x29;
        name: string(STR_INDUSTRY_NAME_SOY_FARM);
        nearby_station_name: string(STR_INDUSTRY_STATION_SOY_FARM);
        life_type: IND_LIFE_TYPE_ORGANIC;
        cargo_types: [
            accept_cargo("FERT"),
            produce_cargo("SOYB", 0),
        ];
        spec_flags: bitmask(IND_FLAG_PLANT_FIELDS_PERIODICALLY, IND_FLAG_PLANT_FIELDS_WHEN_BUILT);
        new_ind_msg: string(STR_INDUSTRY_PLANTED_SOY_FARM);
        closure_msg: string(STR_INDUSTRY_CLOSURE_SOY_FARM);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_SOY_FARM);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_SOY_FARM);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 50;
        prospect_chance: 0.75;
        map_colour: 71;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_soy_farm;
        produce_cargo_arrival: produce_cargo_arrival_soy_farm;
        extra_text_industry: extra_text_industry_fertilizer;
    }
}

produce(produce_accept_yam_farm,
    [FERT: LOAD_TEMP(2);],
    []
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_yam_farm, [
    STORE_TEMP(incoming_cargo_waiting("FERT"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5),
    STORE_TEMP(fertilizer_multiplier(), 6)
]) {
    produce_accept_yam_farm;
}

produce(produce_regular_yam_farm, 
    [], 
    [YAMS: 12 * fertilizer_multiplier();],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_yam_farm, production_cycle_tick()) {
    produce_regular_yam_farm;
}

item (FEAT_INDUSTRIES, industry_yam_farm) {
    property {
        substitute: 0x2A;
        name: string(STR_INDUSTRY_NAME_YAM_FARM);
        nearby_station_name: string(STR_INDUSTRY_STATION_YAM_FARM);
        life_type: IND_LIFE_TYPE_ORGANIC;
        cargo_types: [
            accept_cargo("FERT"),
            produce_cargo("YAMS", 0),
        ];
        spec_flags: bitmask(IND_FLAG_PLANT_FIELDS_PERIODICALLY, IND_FLAG_PLANT_FIELDS_WHEN_BUILT);
        new_ind_msg: string(STR_INDUSTRY_PLANTED_YAM_FARM);
        closure_msg: string(STR_INDUSTRY_CLOSURE_YAM_FARM);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_YAM_FARM);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_YAM_FARM);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 50;
        prospect_chance: 0.75;
        map_colour: 75;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_yam_farm;
        produce_cargo_arrival: produce_cargo_arrival_yam_farm;
        extra_text_industry: extra_text_industry_fertilizer;
    }
}

produce(produce_accept_glassworks,
    [SAND: LOAD_TEMP(2);],
    [VIAL: LOAD_TEMP(5) * LOAD_TEMP(6) / 3; GOOD: LOAD_TEMP(5) * LOAD_TEMP(6) / 3;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_glassworks, [
    STORE_TEMP(incoming_cargo_waiting("SAND"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5),
    STORE_TEMP(1, 6)
]) {
    produce_accept_glassworks;
}

produce(produce_regular_glassworks, 
    [], 
    [VIAL:6;GOOD:4;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_glassworks, production_cycle_tick()) {
    produce_regular_glassworks;
}

item (FEAT_INDUSTRIES, industry_glassworks) {
    property {
        substitute: 0x2B;
        name: string(STR_INDUSTRY_NAME_GLASSWORKS);
        nearby_station_name: string(STR_INDUSTRY_STATION_GLASSWORKS);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("SAND"),
            produce_cargo("VIAL", 0),
            produce_cargo("GOOD", 0)
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_GLASSWORKS);
        closure_msg: string(STR_INDUSTRY_CLOSURE_GLASSWORKS);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_GLASSWORKS);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_GLASSWORKS);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 135;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_glassworks;
        produce_cargo_arrival: produce_cargo_arrival_glassworks;
    }
}

produce(produce_accept_chemical_plant,
    [SALT: LOAD_TEMP(2); PTSH: LOAD_TEMP(3); MNRL: LOAD_TEMP(4);],
    [FERT: LOAD_TEMP(5) * LOAD_TEMP(6) / 4; CHEM: LOAD_TEMP(5) * LOAD_TEMP(6) / 4;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_chemical_plant, [
    STORE_TEMP(incoming_cargo_waiting("SALT"), 2),
    STORE_TEMP(incoming_cargo_waiting("PTSH"), 3),
    STORE_TEMP(incoming_cargo_waiting("MNRL"), 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5),
    STORE_TEMP(triple_combo_multiplier(), 6)
]) {
    produce_accept_chemical_plant;
}

produce(produce_regular_chemical_plant, 
    [], 
    [FERT: 6 * triple_combo_multiplier(); CHEM: 4 * triple_combo_multiplier();],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_chemical_plant, production_cycle_tick()) {
    produce_regular_chemical_plant;
}

item (FEAT_INDUSTRIES, industry_chemical_plant) {
    property {
        substitute: 0x2C;
        name: string(STR_INDUSTRY_NAME_CHEMICAL_PLANT);
        nearby_station_name: string(STR_INDUSTRY_STATION_CHEMICAL_PLANT);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("SALT"),
            accept_cargo("PTSH"),
            accept_cargo("MNRL"),
            produce_cargo("FERT", 0),
            produce_cargo("CHEM", 0)
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_CHEMICAL_PLANT);
        closure_msg: string(STR_INDUSTRY_CLOSURE_CHEMICAL_PLANT);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_CHEMICAL_PLANT);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_CHEMICAL_PLANT);
        prob_in_game: 6;
        prob_map_gen: 9;
        fund_cost_multiplier: 100;
        map_colour: 185;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_chemical_plant;
        produce_cargo_arrival: produce_cargo_arrival_chemical_plant;
        extra_text_industry: extra_text_industry_triple;
    }
}

produce(produce_accept_biolab,
    [CORN: LOAD_TEMP(2);],
    [VGOL: LOAD_TEMP(5) * LOAD_TEMP(6) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_biolab, [
    STORE_TEMP(incoming_cargo_waiting("CORN"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5),
    STORE_TEMP(1, 6)
]) {
    produce_accept_biolab;
}

produce(produce_regular_biolab, 
    [], 
    [VGOL:6;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_biolab, production_cycle_tick()) {
    produce_regular_biolab;
}

item (FEAT_INDUSTRIES, industry_biolab) {
    property {
        substitute: 0x2D;
        name: string(STR_INDUSTRY_NAME_BIOLAB);
        nearby_station_name: string(STR_INDUSTRY_STATION_BIOLAB);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("CORN"),
            produce_cargo("VGOL", 0),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_BIOLAB);
        closure_msg: string(STR_INDUSTRY_CLOSURE_BIOLAB);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_BIOLAB);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_BIOLAB);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 206;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_biolab;
        produce_cargo_arrival: produce_cargo_arrival_biolab;
    }
}

produce(produce_accept_distillery,
    [CORN: LOAD_TEMP(2);],
    [ALCH: LOAD_TEMP(5) * LOAD_TEMP(6) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_distillery, [
    STORE_TEMP(incoming_cargo_waiting("CORN"), 2),
    STORE_TEMP(0, 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5),
    STORE_TEMP(1, 6)
]) {
    produce_accept_distillery;
}

produce(produce_regular_distillery, 
    [], 
    [ALCH:6;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_distillery, production_cycle_tick()) {
    produce_regular_distillery;
}

item (FEAT_INDUSTRIES, industry_distillery) {
    property {
        substitute: 0x2E;
        name: string(STR_INDUSTRY_NAME_DISTILLERY);
        nearby_station_name: string(STR_INDUSTRY_STATION_DISTILLERY);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("CORN"),
            produce_cargo("ALCH", 0),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_DISTILLERY);
        closure_msg: string(STR_INDUSTRY_CLOSURE_DISTILLERY);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_DISTILLERY);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_DISTILLERY);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 192;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_distillery;
        produce_cargo_arrival: produce_cargo_arrival_distillery;
    }
}

produce(produce_accept_processing_plant,
    [SOYB: LOAD_TEMP(2); YAMS: LOAD_TEMP(3); ALCH: LOAD_TEMP(4);],
    [DIOS: LOAD_TEMP(5) * LOAD_TEMP(6) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_processing_plant, [
    STORE_TEMP(incoming_cargo_waiting("SOYB"), 2),
    STORE_TEMP(incoming_cargo_waiting("YAMS"), 3),
    STORE_TEMP(incoming_cargo_waiting("ALCH"), 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5),
    STORE_TEMP(triple_combo_multiplier(), 6)
]) {
    produce_accept_processing_plant;
}

produce(produce_regular_processing_plant, 
    [], 
    [DIOS: 6;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_processing_plant, production_cycle_tick()) {
    produce_regular_processing_plant;
}

item (FEAT_INDUSTRIES, industry_processing_plant) {
    property {
        substitute: 0x2F;
        name: string(STR_INDUSTRY_NAME_PROCESSING_PLANT);
        nearby_station_name: string(STR_INDUSTRY_STATION_PROCESSING_PLANT);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("SOYB"),
            accept_cargo("YAMS"),
            accept_cargo("ALCH"),
            produce_cargo("DIOS", 0),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_PROCESSING_PLANT);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PROCESSING_PLANT);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PROCESSING_PLANT);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PROCESSING_PLANT);
        prob_in_game: 6;
        prob_map_gen: 9;
        fund_cost_multiplier: 100;
        map_colour: 174;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_processing_plant;
        produce_cargo_arrival: produce_cargo_arrival_processing_plant;
        extra_text_industry: extra_text_industry_triple;
    }
}

produce(produce_accept_pharmaceutical_plant_e,
    [DIOS: LOAD_TEMP(2); CHEM: LOAD_TEMP(3);],
    [RWES: LOAD_TEMP(5) * LOAD_TEMP(6) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_pharmaceutical_plant_e, [
    STORE_TEMP(incoming_cargo_waiting("DIOS"), 2),
    STORE_TEMP(incoming_cargo_waiting("CHEM"), 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5),
    STORE_TEMP(double_combo_multiplier(), 6)
]) {
    produce_accept_pharmaceutical_plant_e;
}

produce(produce_regular_pharmaceutical_plant_e, 
    [], 
    [RWES: 6;],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_pharmaceutical_plant_e, production_cycle_tick()) {
    produce_regular_pharmaceutical_plant_e;
}

item (FEAT_INDUSTRIES, industry_pharmaceutical_plant_e) {
    property {
        substitute: 0x30;
        name: string(STR_INDUSTRY_NAME_PHARMACEUTICAL_PLANT_E);
        nearby_station_name: string(STR_INDUSTRY_STATION_PHARMACEUTICAL_PLANT_E);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("DIOS"),
            accept_cargo("CHEM"),
            produce_cargo("RWES", 0),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_PHARMACEUTICAL_PLANT_E);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PHARMACEUTICAL_PLANT_E);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PHARMACEUTICAL_PLANT_E);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PHARMACEUTICAL_PLANT_E);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 152;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_pharmaceutical_plant_e;
        produce_cargo_arrival: produce_cargo_arrival_pharmaceutical_plant_e;
        construction_probability: availability_in_estrogen;
        extra_text_industry: extra_text_industry_double;
    }
}

produce(produce_accept_pharmaceutical_plant_t,
    [DIOS: LOAD_TEMP(2); CHEM: LOAD_TEMP(3);],
    [RWTS: LOAD_TEMP(5) * LOAD_TEMP(6) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_pharmaceutical_plant_t, [
    STORE_TEMP(incoming_cargo_waiting("DIOS"), 2),
    STORE_TEMP(incoming_cargo_waiting("CHEM"), 3),
    STORE_TEMP(0, 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5),
    STORE_TEMP(double_combo_multiplier(), 6)
]) {
    produce_accept_pharmaceutical_plant_t;
}

produce(produce_regular_pharmaceutical_plant_t, 
    [], 
    [RWTS: 6*double_combo_multiplier();],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_pharmaceutical_plant_t, production_cycle_tick()) {
    produce_regular_pharmaceutical_plant_t;
}

item (FEAT_INDUSTRIES, industry_pharmaceutical_plant_t) {
    property {
        substitute: 0x31;
        name: string(STR_INDUSTRY_NAME_PHARMACEUTICAL_PLANT_T);
        nearby_station_name: string(STR_INDUSTRY_STATION_PHARMACEUTICAL_PLANT_T);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("DIOS"),
            accept_cargo("CHEM"),
            produce_cargo("RWTS", 0),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_PHARMACEUTICAL_PLANT_T);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PHARMACEUTICAL_PLANT_T);
        prod_increase_msg: string(STR_INDUSTRY_PRODUCTION_INCREASE_PHARMACEUTICAL_PLANT_T);
        prod_decrease_msg: string(STR_INDUSTRY_PRODUCTION_DECREASE_PHARMACEUTICAL_PLANT_T);
        prob_in_game: 8;
        prob_map_gen: 10;
        fund_cost_multiplier: 100;
        map_colour: 103;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_pharmaceutical_plant_t;
        produce_cargo_arrival: produce_cargo_arrival_pharmaceutical_plant_t;
        construction_probability: availability_in_testosterone;
        extra_text_industry: extra_text_industry_double;
    }
}

produce(produce_accept_pharmacy_e,
    [VIAL: LOAD_TEMP(2); VGOL: LOAD_TEMP(3); RWES: LOAD_TEMP(4);],
    [ESTR: LOAD_TEMP(5) * LOAD_TEMP(6) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_pharmacy_e, [
    STORE_TEMP(incoming_cargo_waiting("VIAL"), 2),
    STORE_TEMP(incoming_cargo_waiting("VGOL"), 3),
    STORE_TEMP(incoming_cargo_waiting("RWES"), 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5),
    STORE_TEMP(triple_combo_multiplier(), 6)
]) {
    produce_accept_pharmacy_e;
}

produce(produce_regular_pharmacy_e, 
    [], 
    [ESTR: 6*triple_combo_multiplier();],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_pharmacy_e, production_cycle_tick()) {
    produce_regular_pharmacy_e;
}

item (FEAT_INDUSTRIES, industry_pharmacy_e) {
    property {
        substitute: 0x32;
        name: string(STR_INDUSTRY_NAME_PHARMACY_E);
        nearby_station_name: string(STR_INDUSTRY_STATION_PHARMACY_E);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("VIAL"),
            accept_cargo("VGOL"),
            accept_cargo("RWES"),
            produce_cargo("ESTR", 0)
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_PHARMACY_E);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PHARMACY_E);
        prob_in_game: 6;
        prob_map_gen: 9;
        fund_cost_multiplier: 100;
        map_colour: 150;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_pharmacy_e;
        produce_cargo_arrival: produce_cargo_arrival_pharmacy_e;
        construction_probability: availability_in_estrogen;
        extra_text_industry: extra_text_industry_triple;
    }
}


produce(produce_accept_pharamacy_t,
    [VIAL: LOAD_TEMP(2); VGOL: LOAD_TEMP(3); RWTS: LOAD_TEMP(4);],
    [TEST: LOAD_TEMP(5) * LOAD_TEMP(6) / 2;]
)

switch(FEAT_INDUSTRIES, SELF, produce_cargo_arrival_pharamacy_t, [
    STORE_TEMP(incoming_cargo_waiting("VIAL"), 2),
    STORE_TEMP(incoming_cargo_waiting("VGOL"), 3),
    STORE_TEMP(incoming_cargo_waiting("RWTS"), 4),
    STORE_TEMP(do_cargo_accept_cycle(), 5),
    STORE_TEMP(triple_combo_multiplier(), 6)
]) {
    produce_accept_pharamacy_t;
}

produce(produce_regular_pharamacy_t, 
    [], 
    [TEST: 6*triple_combo_multiplier();],
    0
)

switch(FEAT_INDUSTRIES, SELF, produce_256_ticks_pharamacy_t, production_cycle_tick()) {
    produce_regular_pharamacy_t;
}

item (FEAT_INDUSTRIES, industry_pharamacy_t) {
    property {
        substitute: 0x33;
        name: string(STR_INDUSTRY_NAME_PHARMACY_T);
        nearby_station_name: string(STR_INDUSTRY_STATION_PHARMACY_T);
        life_type: IND_LIFE_TYPE_PROCESSING;
        cargo_types: [
            accept_cargo("VIAL"),
            accept_cargo("VGOL"),
            accept_cargo("RWTS"),
            produce_cargo("TEST", 0)
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_PHARMACY_T);
        closure_msg: string(STR_INDUSTRY_CLOSURE_PHARMACY_T);
        prob_in_game: 6;
        prob_map_gen: 9;
        fund_cost_multiplier: 100;
        map_colour: 101;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_256_ticks: produce_256_ticks_pharamacy_t;
        produce_cargo_arrival: produce_cargo_arrival_pharamacy_t;
        construction_probability: availability_in_testosterone;
        extra_text_industry: extra_text_industry_triple;
    }
}

produce(produce_accept_gender_clinic_e,
    [ESTR: incoming_cargo_waiting("ESTR");],
    []
)

item (FEAT_INDUSTRIES, industry_gender_clinic_e) {
    property {
        substitute: 0x34;
        name: string(STR_INDUSTRY_NAME_GENDER_CLINIC_E);
        nearby_station_name: string(STR_INDUSTRY_STATION_GENDER_CLINIC_E);
        life_type: IND_LIFE_TYPE_BLACK_HOLE;
        cargo_types: [
            accept_cargo("ESTR"),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_GENDER_CLINIC_E);
        closure_msg: string(STR_INDUSTRY_CLOSURE_GENDER_CLINIC_E);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 25;
        map_colour: 49;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_cargo_arrival: produce_accept_gender_clinic_e;
        construction_probability: availability_in_estrogen;
    }
}


produce(produce_accept_gender_clinic_t,
    [TEST: incoming_cargo_waiting("TEST");],
    []
)

item (FEAT_INDUSTRIES, industry_gender_clinic_t) {
    property {
        substitute: 0x35;
        name: string(STR_INDUSTRY_NAME_GENDER_CLINIC_T);
        nearby_station_name: string(STR_INDUSTRY_STATION_GENDER_CLINIC_T);
        life_type: IND_LIFE_TYPE_BLACK_HOLE;
        cargo_types: [
            accept_cargo("TEST"),
        ];

        new_ind_msg: string(STR_INDUSTRY_PLANTED_GENDER_CLINIC_T);
        closure_msg: string(STR_INDUSTRY_CLOSURE_GENDER_CLINIC_T);
        prob_in_game: 4;
        prob_map_gen: 5;
        fund_cost_multiplier: 25;
        map_colour: 48;
        min_cargo_distr: 1;
        conflicting_ind_types: [];
        layouts: [layout_default];
    }
    graphics {
        build_prod_change: initialize_industry_registers;
        monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
        produce_cargo_arrival: produce_accept_gender_clinic_t;
        construction_probability: availability_in_testosterone;
    }
}